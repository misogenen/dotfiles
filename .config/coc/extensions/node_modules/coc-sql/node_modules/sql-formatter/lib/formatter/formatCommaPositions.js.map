{"version":3,"file":"formatCommaPositions.js","names":["maxLength","PRECEDING_WHITESPACE_REGEX","formatCommaPositions","query","commaPosition","indent","groupCommaDelimitedLines","split","flatMap","commaLines","length","formatTabular","formatBefore","Error","join","lines","groups","i","group","match","push","maxLineLength","trimTrailingCommas","map","line","repeat","whitespace","removeLastIndent","replace","trimStart","RegExp"],"sources":["../../src/formatter/formatCommaPositions.ts"],"sourcesContent":["import { CommaPosition } from '../FormatOptions.js';\nimport { maxLength } from '../utils.js';\n\nconst PRECEDING_WHITESPACE_REGEX = /^\\s+/u;\n\n/**\n * Handles comma placement - either before, after or tabulated\n */\nexport default function formatCommaPositions(\n  query: string,\n  commaPosition: CommaPosition,\n  indent: string\n): string {\n  return groupCommaDelimitedLines(query.split('\\n'))\n    .flatMap(commaLines => {\n      if (commaLines.length === 1) {\n        return commaLines;\n      } else if (commaPosition === 'tabular') {\n        return formatTabular(commaLines);\n      } else if (commaPosition === 'before') {\n        return formatBefore(commaLines, indent);\n      } else {\n        throw new Error(`Unexpected commaPosition: ${commaPosition}`);\n      }\n    })\n    .join('\\n');\n}\n\n/**\n * Given lines like this:\n *\n *     [\n *       'SELECT',\n *       '  foo,',\n *       '  bar,',\n *       '  baz',\n *       'FROM'\n *     ]\n *\n * Returns groups like this:\n *\n *     [\n *       ['SELECT'],\n *       ['  foo,', '  bar,', '  baz'],\n *       ['FROM']\n *     ]\n */\nfunction groupCommaDelimitedLines(lines: string[]): string[][] {\n  const groups: string[][] = [];\n  for (let i = 0; i < lines.length; i++) {\n    const group = [lines[i]];\n    // when line ends with comma,\n    // gather together all following lines that also end with comma,\n    // plus one (which doesn't end with comma)\n    while (lines[i].match(/.*,$/)) {\n      i++;\n      group.push(lines[i]);\n    }\n    groups.push(group);\n  }\n  return groups;\n}\n\n// makes all lines the same length by appending spaces before comma\nfunction formatTabular(commaLines: string[]): string[] {\n  const maxLineLength = maxLength(commaLines);\n  return trimTrailingCommas(commaLines).map((line, i) => {\n    if (i === commaLines.length - 1) {\n      return line; // do not add comma for last item\n    }\n    return line + ' '.repeat(maxLineLength - line.length - 1) + ',';\n  });\n}\n\nfunction formatBefore(commaLines: string[], indent: string): string[] {\n  return trimTrailingCommas(commaLines).map((line, i) => {\n    if (i === 0) {\n      return line; // do not add comma for first item\n    }\n    const [whitespace] = line.match(PRECEDING_WHITESPACE_REGEX) || [''];\n    return (\n      removeLastIndent(whitespace, indent) +\n      indent.replace(/ {2}$/, ', ') + // add comma to the end of last indent\n      line.trimStart()\n    );\n  });\n}\n\nfunction removeLastIndent(whitespace: string, indent: string): string {\n  return whitespace.replace(new RegExp(indent + '$'), '');\n}\n\nfunction trimTrailingCommas(lines: string[]): string[] {\n  return lines.map(line => line.replace(/,$/, ''));\n}\n"],"mappings":"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"}