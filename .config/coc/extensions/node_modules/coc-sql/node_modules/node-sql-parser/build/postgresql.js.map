{"version":3,"sources":["/Users/taozhi/Workspaces/OpenSources/node-sql-parser/webpack/bootstrap","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/pegjs/postgresql.pegjs","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/external \"big-integer\"","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.single.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/util.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/window.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/over.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/binary.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/func.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/limit.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/with.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/update.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/insert.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/tables.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/select.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/show.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/array-struct.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/expr.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/aggregation.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/assign.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/case.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/column.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/interval.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/index-definition.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/constrain.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/create.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/alter.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/command.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/exec.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/union.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/analyze.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/delete.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/sql.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c4","peg$literalExpectation","peg$c7","peg$c9","peg$c11","peg$c19","peg$c22","peg$c23","k","resource","prefix","toLowerCase","peg$c25","peg$c28","peg$c31","peg$c34","peg$c36","peg$c39","peg$c41","peg$c48","peg$c50","peg$c52","peg$c58","peg$c61","peg$c63","peg$c65","peg$c79","peg$c81","peg$c83","peg$c85","peg$c88","peg$c90","peg$c92","peg$c107","peg$c109","peg$c111","peg$c113","peg$c116","peg$c118","peg$c120","peg$c126","peg$c130","peg$c133","peg$c135","peg$c137","peg$c140","peg$c142","peg$c145","peg$c147","peg$c149","peg$c151","peg$c153","peg$c156","peg$c158","peg$c160","peg$c162","peg$c164","peg$c166","peg$c168","peg$c172","peg$c176","peg$c178","peg$c180","peg$c182","peg$c185","peg$c187","peg$c189","peg$c191","peg$c196","peg$c198","peg$c201","peg$c203","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c217","peg$c220","peg$c222","peg$c224","peg$c226","peg$c229","peg$c235","peg$c237","peg$c239","peg$c241","peg$c243","peg$c245","peg$c247","peg$c249","peg$c251","peg$c254","peg$c258","peg$c261","peg$c264","peg$c267","peg$c269","peg$c292","peg$c294","peg$c300","peg$c302","peg$c304","peg$c306","peg$c313","peg$c315","peg$c318","peg$c320","peg$c322","head","tail","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c331","peg$c335","peg$c337","peg$c344","peg$c365","peg$c368","peg$c371","peg$c374","peg$c385","peg$c411","createBinaryExprChain","peg$c413","peg$c420","peg$c422","peg$c424","peg$c426","peg$c428","peg$c430","peg$c438","peg$c442","peg$c449","peg$c451","peg$c453","peg$c455","peg$c457","peg$c459","peg$c462","peg$c464","peg$c467","peg$c469","peg$c471","peg$c475","peg$c479","peg$c487","reservedMap","peg$c496","peg$c497","peg$c498","peg$classExpectation","peg$c499","chars","peg$c500","peg$c501","peg$c503","peg$c504","peg$c505","peg$c509","peg$c510","peg$c511","peg$c512","peg$c513","peg$c514","peg$c516","peg$c521","peg$c525","peg$c532","peg$c534","peg$c536","peg$c538","peg$c540","peg$c542","peg$c544","peg$c546","peg$c548","peg$c550","peg$c555","peg$c557","peg$c559","peg$c561","peg$c564","peg$c572","peg$c574","peg$c576","peg$c579","peg$c585","peg$c587","peg$c589","peg$c591","peg$c593","peg$c595","peg$c597","peg$c599","peg$c601","peg$c603","peg$c605","peg$c607","peg$c609","peg$c611","peg$c613","peg$c615","peg$c617","peg$c619","peg$c621","peg$c623","peg$c625","peg$c627","peg$c642","peg$c643","peg$c649","peg$c650","peg$c651","peg$c652","peg$c654","peg$c657","peg$c660","peg$c663","peg$c666","peg$c669","peg$c672","peg$c675","peg$c678","peg$c681","peg$c684","peg$c687","peg$c689","peg$c690","peg$c699","peg$c703","peg$c704","peg$c705","peg$c706","peg$c707","peg$c708","peg$c709","peg$c710","peg$c713","peg$c715","peg$c717","peg$c719","peg$c721","peg$c723","peg$c725","peg$c728","peg$c730","peg$c732","peg$c734","peg$c736","peg$c738","peg$c741","peg$c744","peg$c746","peg$c748","peg$c750","peg$c752","peg$c755","peg$c759","peg$c762","peg$c764","peg$c766","peg$c768","peg$c771","peg$c774","peg$c777","peg$c780","peg$c784","peg$c787","peg$c789","peg$c791","peg$c793","peg$c795","peg$c797","peg$c799","peg$c801","peg$c803","peg$c805","peg$c807","peg$c809","peg$c811","peg$c813","peg$c815","peg$c817","peg$c819","peg$c822","peg$c825","peg$c828","peg$c831","peg$c834","peg$c838","peg$c841","peg$c844","peg$c847","peg$c851","peg$c854","peg$c857","peg$c860","peg$c863","peg$c866","peg$c869","peg$c872","peg$c875","peg$c878","peg$c881","peg$c884","peg$c887","peg$c889","peg$c891","peg$c893","peg$c895","peg$c897","peg$c899","peg$c902","peg$c905","peg$c908","peg$c911","peg$c914","peg$c917","peg$c920","peg$c923","peg$c926","peg$c929","peg$c932","peg$c935","peg$c938","peg$c941","peg$c944","peg$c947","peg$c950","peg$c953","peg$c956","peg$c959","peg$c962","peg$c965","peg$c968","peg$c971","peg$c975","peg$c978","peg$c981","peg$c984","peg$c987","peg$c990","peg$c993","peg$c996","peg$c1002","peg$c1011","peg$c1014","peg$c1017","peg$c1020","peg$c1023","peg$c1026","peg$c1029","peg$c1032","peg$c1035","peg$c1038","peg$c1041","peg$c1043","peg$c1045","peg$c1047","peg$c1049","peg$c1051","peg$c1053","peg$c1055","peg$c1058","peg$c1061","peg$c1065","peg$c1068","peg$c1073","peg$c1076","peg$c1079","peg$c1082","peg$c1085","peg$c1087","peg$c1089","peg$c1091","peg$c1093","peg$c1095","peg$c1097","peg$c1099","peg$c1101","peg$c1103","peg$c1105","peg$c1107","peg$c1109","peg$c1111","peg$c1113","peg$c1115","peg$c1117","peg$c1119","peg$c1123","peg$c1124","peg$c1125","peg$c1138","peg$c1139","peg$c1150","peg$c1154","dataType","peg$c1160","peg$c1162","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsecrud_stmt","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","peg$parsecmd_stmt","s9","s11","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parsetable_ref_list","a","tt","db","keyword","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parsetable_name","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","createList","peg$parsedrop_index_opt","op","peg$c97","peg$parsedrop_stmt","s13","s15","s17","s19","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseif_not_exists_stmt","s8","peg$parseLPAREN","peg$parsecreate_definition","peg$parseCOMMA","peg$parseRPAREN","peg$parsecreate_table_definition","peg$parsetable_option","peg$parsetable_options","peg$parseKW_IGNORE","peg$parseKW_REPLACE","peg$parseKW_AS","peg$parseunion_stmt","tp","ife","to","ir","qe","temporary","if_not_exists","ignore_replace","query_expr","create_definitions","table_options","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","e","parentheses","lt","like","peg$c16","peg$parsecreate_table_stmt","s18","s20","s21","s23","s25","s27","s29","peg$parseKW_CONSTRAINT","substr","peg$parseident_name","peg$parsetrigger_event","peg$parseKW_OR","peg$parsetrigger_event_list","peg$parseKW_FROM","args","kw","peg$parsetrigger_deferrable","ob","peg$parsetrigger_for_row","peg$parseKW_WHEN","peg$parseexpr","cond","peg$parsetrigger_when","peg$parseproc_func_call","kc","te","tn","fr","de","fe","tw","fct","constraint","events","deferrable","for_each","when","execute","expr","constraint_type","constraint_kw","peg$parsecreate_constraint_trigger","s12","s14","s16","peg$parseliteral_string","peg$parseKW_WITH","w","v","f","extension","commonStrToLiteral","with","schema","version","peg$parsecreate_extension_stmt","s24","s26","s28","s30","peg$parseKW_UNIQUE","peg$parseident_start","peg$parseKW_CONCURRENTLY","peg$parseident","peg$parseindex_type","peg$parsecolumn_order","peg$parsecolumn_order_list","peg$parseindex_option","peg$parseindex_options_list","peg$parseKW_TABLESPACE","peg$parsewhere_clause","co","on","ta","um","cols","wr","ts","index_type","concurrently","index","on_kw","index_using","index_columns","with_before_where","tablespace","where","peg$parsecreate_index_stmt","peg$parseKW_TEMP","peg$parseKW_SEQUENCE","peg$parsealias_ident","peg$parsecreate_sequence_definition","peg$parsecreate_sequence_definition_list","sequence","peg$parsecreate_sequence","peg$parseKW_DATABASE","peg$parseKW_SCHEME","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","database","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_SET","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parselock_mode","lm","nw","tables","map","lock_mode","nowait","peg$parselock_stmt","peg$parseKW_SHOW","peg$parseshow_stmt","peg$parseKW_DEALLOCATE","peg$parseKW_ALL","peg$parsedeallocate_stmt","peg$parseKW_UPDATE","peg$parseset_item","peg$parseset_list","peg$parsereturning_stmt","set","returning","peg$parseupdate_stmt","peg$parsereplace_insert","peg$parseKW_INTO","peg$parseinsert_partition","peg$parsecolumn_list","peg$parseinsert_value_clause","ri","isArray","row","idx","values","partition","peg$c393","peg$parsereplace_insert_stmt","ig","it","filter","peg$c394","peg$parseinsert_no_columns_stmt","peg$parseKW_DELETE","peg$parsefrom_clause","info","addition","peg$c382","peg$parsedelete_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parseselect_stmt","peg$parseKW_UNION","peg$parseorder_by_clause","peg$parselimit_clause","_next","union","_orderby","_limit","peg$c2","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseKW_BY","peg$parseliteral_numeric","peg$parsesequence_definition_increment","peg$parsesequence_definition_minval","peg$parsesequence_definition_maxval","peg$parsesequence_definition_start","peg$parsesequence_definition_cache","peg$parsesequence_definition_cycle","peg$parsesequence_definition_owned","s10","nf","peg$parsecollate_expr","peg$parseKW_ASC","peg$parseKW_DESC","collate","opclass","order","nulls","peg$parsecreate_column_definition","peg$parsecreate_index_definition","peg$parsecreate_fulltext_spatial_index_definition","peg$parseconstraint_name","peg$parsecte_column_definition","peg$parseindex_options","id","definition","index_options","peg$parsecreate_constraint_primary","peg$parseKW_KEY","peg$parsecolumn","u","peg$parsecreate_constraint_unique","peg$parsereference_definition","reference_definition","peg$parsecreate_constraint_foreign","peg$parsecreate_constraint_definition","peg$parsecolumn_definition_opt","peg$parseliteral_not_null","peg$parseliteral_null","peg$parsedefault_expr","df","default_val","nullable","peg$c76","peg$parsecolumn_constraint","auto_increment","unique_or_primary","peg$c66","peg$parsekeyword_comment","comment","peg$parsecolumn_format","column_format","peg$parsestorage","storage","peg$parsecreate_option_character_set_kw","peg$parseKW_ASSIGIN_EQUAL","character_set","symbol","peg$c72","cdo","peg$parsedata_type","opt","peg$c73","peg$parsecolumn_definition_opt_list","peg$parseKW_COLLATE","peg$parseKW_DEFAULT","peg$parseliteral","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","action","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseALTER_ADD_INDEX_OR_KEY","fsid","peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX","peg$parseKW_TO","peg$parseALTER_RENAME_TABLE","algorithm","lock","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","match","on_delete","on_update","ro","peg$parse___","peg$parsereference_option","peg$parseKW_INSERT","peg$parsecolumn_ref_list","peg$c173","peg$parseKW_COMMENT","peg$c218","peg$c227","peg$c230","peg$parseKW_SELECT","peg$parseselect_stmt_nake","parentheses_symbol","peg$parsewith_clause","cte","peg$parsecte_definition","peg$parseKW_RECURSIVE","recursive","stmt","peg$parsedistinct_on","peg$parseKW_DISTINCT","console","lo","peg$c276","s22","peg$parsequery_option","opts","peg$c278","peg$parseoption_clause","peg$parsecolumn_clause","peg$parseinto_clause","peg$parseKW_GROUP","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","ci","fi","g","h","win","li","distinct","into","position","groupby","having","orderby","limit","window","peg$c277","peg$parseOPT_SQL_CALC_FOUND_ROWS","peg$parseOPT_SQL_CACHE","peg$parseOPT_SQL_NO_CACHE","peg$parseOPT_SQL_BIG_RESULT","peg$parseOPT_SQL_SMALL_RESULT","peg$parseOPT_SQL_BUFFER_RESULT","peg$parseSTAR","peg$parsecolumn_list_item","peg$c281","peg$parsearray_index","peg$parseLBRAKE","peg$parsenumber","peg$parseRBRAKE","brackets","number","peg$parseexpr_item","peg$parseKW_AND","peg$parseLOGIC_OPERATOR","len","result","left","createBinaryExpr","peg$c409","peg$parsebinary_column_expr","array_index","peg$parsestring_constants_escape","peg$parseKW_DOUBLE_COLON","peg$parseadditive_operator","peg$parsemultiplicative_operator","peg$parsealias_clause","target","operator","peg$parseDOT","tbl","peg$c286","alias","peg$c287","peg$parsevalue_alias_clause","peg$parsevar_decl","peg$parsevar_decl_list","peg$parseKW_USING","peg$c309","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c311","peg$c321","peg$parsetable_base","peg$parsetable_ref","peg$parsejoin_op","using","peg$parseon_clause","peg$c326","peg$c327","peg$parsetable_join","peg$parseKW_DUAL","peg$parsevalue_clause","peg$c332","peg$parsefunc_call","peg$c333","re","tablesample","repeatable","peg$c338","peg$c339","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","peg$parseident_without_kw","obj","peg$c347","peg$c349","peg$parseor_and_where_expr","peg$parseKW_WHERE","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$parseKW_BETWEEN","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","nl","peg$c379","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","peg$parseKW_OFFSET","res","seperator","peg$c380","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c387","peg$parseKW_RETURNING","peg$parsevalue_item","peg$parsevalue_list","el","peg$c400","peg$parseinterval_expr","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$c402","peg$parsecase_expr","condition_list","otherwise","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","peg$c404","peg$parseKW_THEN","peg$parseKW_ELSE","peg$parseprimary","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","createUnaryExpr","peg$parseunary_expr","peg$c410","peg$parsenot_expr","peg$parsecomparison_expr","nk","peg$parseexists_op","peg$parseexists_expr","rh","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$c447","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","pop","tableName","peg$c432","peg$c433","peg$parseis_op_right","peg$parseKW_ILIKE","peg$parselike_op","peg$parseescape_op","es","escape","peg$parselike_op_right","peg$parseOPERATOR_CONCATENATION","peg$parseDOUBLE_WELL_ARROW","peg$parseWELL_ARROW","peg$parsejsonb_op_right","peg$parsecomparison_op_right","peg$parseKW_IN","peg$parsemultiplicative_expr","list","peg$parseaggr_func","peg$parsewindow_func","peg$c631","peg$parseKW_CAST","peg$c632","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c633","scale","peg$c634","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c635","peg$parsecast_expr","peg$c477","charAt","peg$parsesingle_char","peg$c481","peg$parseDOUBLE_ARROW","peg$parseSINGLE_ARROW","arrows","item","properties","peg$c482","peg$c484","peg$c485","peg$parsequoted_ident","JSON","stringify","peg$c490","peg$c492","test","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parsecolumn_name","peg$parseident_part","peg$parseon_update_current_timestamp","peg$parseKW_CURRENT_TIMESTAMP","peg$c519","peg$parseover_partition","peg$parseKW_COUNT","peg$parseKW_GROUP_CONCAT","peg$parsestar_expr","peg$parsedistinct_args","peg$parsecount_arg","over","peg$parseliteral_array","arg","or","bc","within_group_orderby","peg$c560","peg$c562","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseKW_ARRAY_AGG","pre","peg$parseaggr_array_agg","peg$parseaggr_filter","peg$parseKW_WIN_FNS_RANK","peg$parsewindow_fun_rank","peg$parseKW_LAG_LEAD","peg$parseconsider_nulls_clause","consider_nulls","peg$parsewindow_fun_laglead","peg$parseKW_FIRST_LAST_VALUE","peg$parsewindow_fun_firstlast","peg$parseconcat_separator","separator","peg$c567","peg$parsetrim_rem","peg$parsetrim_position","rm","peg$c577","tr","peg$c580","peg$parsetrim_func_clause","peg$parseproc_func_name","peg$parsescalar_time_func","peg$parseKW_CURRENT_USER","peg$parseKW_USER","peg$parseKW_SESSION_USER","peg$parseKW_SYSTEM_USER","peg$parsescalar_func","peg$c582","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_TIME","peg$parseKW_DATE","field","cast_type","source","peg$parseextract_func","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","ca","peg$parsesingle_quote_char","peg$c648","peg$parseliteral_datetime","peg$parseKW_ARRAY","expr_list","peg$parseKW_NULL","peg$parseKW_NOT_NULL","fs","peg$c645","peg$c646","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c693","exp","peg$c694","peg$c695","peg$parsedigits","peg$parsedigit","digit","peg$c697","sign","peg$parsee","peg$parseKW_CHAR","peg$parseKW_VARCHAR","peg$parseKW_NUMERIC","peg$parseKW_INT","peg$parseKW_SMALLINT","peg$parseKW_TINYINT","peg$parseKW_TINYTEXT","peg$parseKW_TEXT","peg$parseKW_MEDIUMTEXT","peg$parseKW_LONGTEXT","peg$parseKW_BIGINT","peg$parseKW_FLOAT","peg$parseKW_DOUBLE","peg$parseKW_VAR_PRE_DOLLAR","peg$parseKW_VAR_PRE_DOLLAR_DOUBLE","peg$parseKW_VAR_PRE","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR__PRE_AT","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parseblock_comment","peg$parsechar","peg$parseEOL","peg$parseline_comment","peg$parseEOF","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseproc_primary_list","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseproc_primary","peg$c1132","peg$c1134","suffix","peg$c1141","peg$c1142","peg$c1143","peg$c1145","peg$parsemem_chain","members","peg$parsenumeric_type","peg$parsecharacter_string_type","array","peg$c1147","peg$parsearray_type","peg$parsetimezone","tz","peg$c1164","peg$c1165","peg$parsetime_type","peg$parsedatetime_type","peg$parseKW_JSON","peg$parseKW_JSONB","peg$parsejson_type","peg$parseKW_GEOMETRY","peg$parsegeometry_type","peg$c1170","peg$parsetext_type","peg$parseKW_UUID","peg$parseuuid_type","peg$parseKW_BOOL","peg$parseKW_BOOLEAN","peg$parseboolean_type","peg$parseKW_ENUM","peg$parseenum_type","peg$parseKW_SERIAL","peg$parseserial_interval_type","peg$parsebinary_type","peg$c1153","peg$parsenumeric_type_suffix","peg$parseKW_ZEROFILL","un","ze","peg$c1155","peg$c1157","peg$c1158","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","keys","columnInfo","split","strOrLiteral","require","PARSER_NAME","DEFAULT_OPT","parserOpt","commonOptionConnector","connector","str","createValueExpr","getParserOpt","setParserOpt","topToSQL","percent","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","replaceParams","params","replaceParamsInner","onPartitionsToSQL","partitions","dataTypeToSQL","arrayStructTypeToSQL","anglebracket","dataTypeUpper","field_name","field_type","commentToSQL","triggerEventToSQL","event","eventKw","kwArgs","columnRefToSQL","returningToSQL","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","constructArgsList","argsList","exprToSQL","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","upperType","onUpdate","binaryToSQL","rstr","isBetween","castToSQL","expression","dataTypeSuffix","symbolChar","arrayDimension","arrayDimensionToSymbol","funcToSQL","args_parentheses","collateStr","overStr","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","withExprStr","setToSQL","sets","clauses","setItem","valuesToSQL","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","on_duplicate_update","duplicateSet","tablesToSQL","operatorToSQL","in_expr","sql","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","tableToSQL","unnestExpr","withOffset","with_offset","unnestToSQL","prefixStr","table_hint","schemaStr","valueSQL","valuesExpr","tableSampleSQL","baseTable","joinExpr","tableOptionToSQL","tableOption","selectIntoToSQL","intoType","varToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","lockingRead","locking_read","qualify","top","windowInfo","withInfo","distinctToSQL","columnsToSQL","intoSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","view","arrayStructValueToSQL","exprList","arrayPath","array_path","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","distinctSQL","withinGroup","filterStr","window_func","assign","leftVar","rightVal","binary_expr","case","conditions","cast","column_ref","datatype","extract","castType","fulltext_search","against","matchExpr","againstExpr","asToSQL","function","insert","unionToSQL","interval","intervalExpr","show","struct","namedWindowExprInfo","varName","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","enforced","referenceDefinition","constraintSQL","columnReferenceDefinitionToSQL","columnOffsetToSQL","arrow","columnDataType","reference","onDelete","columnOrder","columnDefinitionToSQL","columnDefinition","columnOpt","characterSet","check","defaultOpt","autoIncrement","uniquePrimary","columnFormat","columnOption","generated","storage_type","generatedExpressionToSQL","asStr","getDual","star","columnsStr","has","columnToSQL","createDefinitionToSQL","indexSQL","createDefinition","firstAfter","first_after","ifNotExists","oldColumn","old_column","trim","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lockInfo","pgLock","execVariablesToSQL","select","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","tableOptions","ignoreReplace","queryExpr","likeType","likeTableName","createTableToSQL","constraintKw","createTriggerToSQL","withName","createExtensionToSQL","fileStream","filestream_on","include","indexColumns","indexUsing","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","withBeforeWhere","withIndexOpt","includeColumns","createIndexToSQL","createSequenceToSQL","createDatabaseToSQL","definer","sqlSecurity","sql_security","withClause","viewName","createViewToSQL","deallocate","delete","exec","parameters","update","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","unlock","fun","unionKeyword","bigQueryToSQL","bigquery","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","typeCase","parsers","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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TtU,EAosTiBqV,EApsTXpV,EAosTeglB,GApsTxBlwB,EAosTgBwf,GAlsThCjc,KAAOge,EACTvhB,EAAE07B,MAAQra,GAAWpW,EAAMC,GAksTXkU,EADAG,EAhsTTvf,IA2sTK+d,GAAcqB,EACdA,EAAKrb,QAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,OAGPga,GAAcqB,EACdA,EAAKrb,EApvTM,IAASwd,EAAIvhB,EAAGiL,EAAMC,EAsvT/BkU,IAAOrb,IACTqb,EAAKrB,IACLwB,EAAKkc,QACM13B,GACJub,OACMvb,IACTyb,EAAK+b,QACMx3B,GACJub,OACMvb,IACT2b,EAAKic,QACM53B,IACT2b,EAAK,MAEHA,IAAO3b,GACMqb,EACfG,EAhwTC,SAASgC,EAAIvhB,EAAGumB,GAIrB,OAFAvmB,EAAEuD,KAAOge,EACTvhB,EAAEyoB,GAAKlC,EACAvmB,EA4vTE47B,CAASrc,EAAIC,EAAIE,GACtBN,EAAKG,IAELxB,GAAcqB,EACdA,EAAKrb,KAebga,GAAcqB,EACdA,EAAKrb,GAEHqb,IAAOrb,IACTqb,EAAKrB,IACLwB,EAAKkc,QACM13B,GACJub,OACMvb,IACTyb,EAAK0C,QACMne,GACJub,OACMvb,IACT2b,EAAKkD,QACM7e,GACJub,OACMvb,GACJse,OACMte,GACJub,OACMvb,IACTuc,EAAKga,QACMv2B,IACTuc,EAAK,MAEHA,IAAOvc,IACTmsB,EAAM5Q,QACMvb,IACVwc,EAAMob,QACM53B,IACVwc,EAAM,MAEJA,IAAQxc,GACKqb,EACfG,EA/yTb,SAASgC,EAAI6U,EAAMwE,EAAOrU,GAQjC,OADA6P,EAAKxS,aAAc,EACZ,CACL2C,KAAM6P,EACN7qB,GAAIqvB,EACJr3B,KAAMge,EACNkH,GAAIlC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B,QACM1/B,GACJub,OACMvb,IACTyb,EAAK0C,QACMne,GACJub,OACMvb,IACT2b,EAAK2F,QACMthB,GACJub,OACMvb,IACT6b,EAAK+C,QACM5e,GACJub,OACMvb,IACTuc,EAAKqjB,QACM5/B,GACHub,OACMvb,IACVwc,EAAM2B,QACMne,GACJub,OACMvb,IACV2d,EAAMkiB,QACM7/B,GACJub,OACMvb,GACJse,OACMte,GACJub,OACMvb,IACV6d,EAAMS,QACMte,GACKqb,EACfG,EAl5hB3B,SAASoE,EAAGkgB,GAEnB,MAAO,CACLzgC,KAAM,OACNmjB,KAAM5C,EACNuP,OAAQ,KACRqH,OAAQ,CACN3c,SAAU,WAAaimB,EAAY,MA24hBAC,CAASpkB,EAAIgC,GAClBtC,EAAKG,IAkErCxB,GAAcqB,EACdA,EAAKrb,GAEHqb,IAAOrb,IACTqb,EAAKrB,IACLwB,EAAKkkB,QACM1/B,GACJub,OACMvb,IACTyb,EAAK0C,QACMne,GACJub,OACMvb,IACT2b,EAAK2F,QACMthB,GACJub,OACMvb,IACT6b,EAAK+C,QACM5e,GACJub,OACMvb,IACTuc,EAAKqjB,QACM5/B,GACHub,OACMvb,IACVwc,EAAM2B,QACMne,GACJub,OACMvb,IACV2d,EAAMkiB,QACM7/B,GACJub,OACMvb,GACJqe,OACMre,GACJub,OACMvb,IACV6d,EAAMgiB,QACM7/B,GACJub,OACMvb,GACJse,OACMte,GACJub,OACMvb,GACJse,OACMte,GACKqb,EACfG,EA1/hBrC,SAASoE,EAAGkgB,EAAWE,GAE5B,MAAO,CACL3gC,KAAM,OACNmjB,KAAM5C,EACNuP,OAAQ,KACRqH,OAAQ,CACN3c,SAAU,WAAaimB,EAAY,KAAOE,EAAQ,MAm/hBPC,CAAStkB,EAAIgC,EAAKE,GACvBxC,EAAKG,IAkF7CxB,GAAcqB,EACdA,EAAKrb,GAEHqb,IAAOrb,IACTqb,EAAKrB,IACLwB,EAAKkkB,QACM1/B,GACJub,OACMvb,IACTyb,EAAK0C,QACMne,GACJub,OACMvb,IACT2b,EAAK2F,QACMt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","file":"postgresql.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          // => multiple_stmt | cmd_stmt | crud_stmt\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            /*\n            // is in reality: { tableList: any[]; columnList: any[]; ast: T; }\n            export type AstStatement<T> = T;\n             => AstStatement<crud_stmt[]> */\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n            \tast: cur\n            }\n          },\n      peg$c2 = function(head, tail, ob, l) {\n           /* export interface union_stmt_node extends select_stmt_node  {\n               _next: union_stmt_node;\n               union: 'union' | 'union all';\n            }\n           => AstStatement<union_stmt_node>\n           */\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][5]\n              cur.union = tail[i][3] ? 'union all' : 'union'\n              cur = cur._next\n            }\n            if(ob) head._orderby = ob\n            if(l && l.value && l.value.length > 0) head._limit = l\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c3 = \"if\",\n      peg$c4 = peg$literalExpectation(\"IF\", true),\n      peg$c5 = function() {\n          // => 'IF NOT EXISTS'\n          return 'IF NOT EXISTS'\n        },\n      peg$c6 = \"extension\",\n      peg$c7 = peg$literalExpectation(\"EXTENSION\", true),\n      peg$c8 = \"schema\",\n      peg$c9 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c10 = \"version\",\n      peg$c11 = peg$literalExpectation(\"VERSION\", true),\n      peg$c12 = function(a, e, ife, n, w, s, v, f) {\n            /*\n             export type nameOrLiteral = literal_string | { type: 'same', value: string; };\n            => {\n                type: 'create';\n                keyword: 'extension';\n                if_not_exists?: 'if not exists';\n                extension: nameOrLiteral;\n                with: 'with';\n                schema: nameOrLiteral;\n                version: nameOrLiteral;\n                from: nameOrLiteral;\n              }\n            */\n            return {\n              type: 'create',\n              keyword: e.toLowerCase(),\n              if_not_exists:ife,\n              extension: commonStrToLiteral(n),\n              with: w && w[0].toLowerCase(),\n              schema: commonStrToLiteral(s && s[2].toLowerCase()), // <== wont that be a bug ?\n              version: commonStrToLiteral(v && v[2]),\n              from: commonStrToLiteral(f && f[2]),\n            }\n          },\n      peg$c13 = function(head, tail) {\n          // => create_option_character_set[]\n          return createList(head, tail, 1)\n        },\n      peg$c14 = function(a, k, ife, t, c) {\n            /*\n            export type create_db_stmt = {\n              type: 'create',\n              keyword: 'database',\n              if_not_exists?: 'if not exists',\n              database: string,\n              create_definition?: create_db_definition\n            }\n            => AstStatement<create_db_stmt>\n            */\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists:ife,\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c15 = function(a, tp, ife, t, c, to, ir, as, qe) {\n            /*\n            export type create_table_stmt_node = create_table_stmt_node_simple | create_table_stmt_node_like;\n            export interface create_table_stmt_node_base {\n              type: 'create';\n              keyword: 'table';\n              temporary?: 'temporary';\n              if_not_exists?: 'if not exists';\n              table: table_ref_list;\n            }\n            export interface create_table_stmt_node_simple extends create_table_stmt_node_base{\n              ignore_replace?: 'ignore' | 'replace';\n              as?: 'as';\n              query_expr?: union_stmt_node;\n              create_definition?: create_table_definition;\n              table_options?: table_options;\n            }\n            => AstStatement<create_table_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n                table_options: to\n              }\n            }\n          },\n      peg$c16 = function(a, tp, ife, t, lt) {\n            /*\n\n            export interface create_table_stmt_node_like extends create_table_stmt_node_base{\n              like: create_like_table;\n            }\n            => AstStatement<create_table_stmt_node>;\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c17 = function(a, tp, ife, t, as, c) {\n            /*\n            export type create_sequence_stmt = {\n              type: 'create',\n              keyword: 'sequence',\n              temporary?: 'temporary' | 'temp',\n              if_not_exists?: 'if not exists',\n              table: table_ref_list,\n              create_definition?: create_sequence_definition_list\n            }\n            => AstStatement<create_sequence_stmt>\n            */\n            t.as = as && as[2]\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'sequence',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists:ife,\n                sequence: [t],\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c18 = \"increment\",\n      peg$c19 = peg$literalExpectation(\"INCREMENT\", true),\n      peg$c20 = function(k, b, n) {\n          /*\n          export type sequence_definition = { \"resource\": \"sequence\", prefix?: string,value: literal | column_ref }\n          => sequence_definition\n          */\n          return {\n            resource: 'sequence',\n            prefix: b ? `${k.toLowerCase()} by` : k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c21 = \"minvalue\",\n      peg$c22 = peg$literalExpectation(\"MINVALUE\", true),\n      peg$c23 = function(k, n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c24 = \"no\",\n      peg$c25 = peg$literalExpectation(\"NO\", true),\n      peg$c26 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: 'no minvalue'\n            }\n          }\n        },\n      peg$c27 = \"maxvalue\",\n      peg$c28 = peg$literalExpectation(\"MAXVALUE\", true),\n      peg$c29 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: 'no maxvalue'\n            }\n          }\n        },\n      peg$c30 = \"start\",\n      peg$c31 = peg$literalExpectation(\"START\", true),\n      peg$c32 = function(k, w, n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: w ? `${k.toLowerCase()} with` : k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c33 = \"cache\",\n      peg$c34 = peg$literalExpectation(\"CACHE\", true),\n      peg$c35 = \"cycle\",\n      peg$c36 = peg$literalExpectation(\"CYCLE\", true),\n      peg$c37 = function(n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: n ? 'no cycle' : 'cycle'\n            }\n          }\n        },\n      peg$c38 = \"owned\",\n      peg$c39 = peg$literalExpectation(\"OWNED\", true),\n      peg$c40 = \"none\",\n      peg$c41 = peg$literalExpectation(\"NONE\", true),\n      peg$c42 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: 'owned by',\n            value: {\n              type: 'origin',\n              value: 'none'\n            }\n          }\n        },\n      peg$c43 = function(n, col) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: 'owned by',\n            value: col\n          }\n        },\n      peg$c44 = function(head, tail) {\n          // => create_sequence_definition[]\n          return createList(head, tail, 1)\n      },\n      peg$c45 = function(a, kw, t, co, n, on, ta, um, cols, wr, ts, w) {\n          /*\n          export interface create_index_stmt_node {\n            type: 'create';\n            index_type?: 'unique';\n            keyword: 'index';\n            concurrently?: 'concurrently';\n            index: string;\n            on_kw: string;\n            table: table_name;\n            index_using?: index_type;\n            index_columns: column_order[];\n            with?: index_option[];\n            with_before_where: true;\n            tablespace?: {type: 'origin'; value: string; }\n            where?: where_clause;\n          }\n          => AstStatement<create_index_stmt_node>\n          */\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                index_type: kw && kw.toLowerCase(),\n                keyword: t.toLowerCase(),\n                concurrently: co && co.toLowerCase(),\n                index: n,\n                on_kw: on[0].toLowerCase(),\n                table: ta,\n                index_using: um,\n                index_columns: cols,\n                with: wr && wr[4],\n                with_before_where: true,\n                tablespace: ts && { type: 'origin', value: ts[2] },\n                where: w,\n              }\n          }\n        },\n      peg$c46 = function(head, tail) {\n          // => column_order[]\n          return createList(head, tail)\n        },\n      peg$c47 = \"nulls\",\n      peg$c48 = peg$literalExpectation(\"NULLS\", true),\n      peg$c49 = \"first\",\n      peg$c50 = peg$literalExpectation(\"FIRST\", true),\n      peg$c51 = \"last\",\n      peg$c52 = peg$literalExpectation(\"LAST\", true),\n      peg$c53 = function(c, ca, op, o, nf) {\n          /*\n          => {\n            column: expr;\n            collate: collate_expr;\n            opclass: ident;\n            order: 'asc' | 'desc';\n            nulls: 'nulls last' | 'nulls first';\n          }\n          */\n          return {\n            column: c,\n            collate: ca,\n            opclass: op,\n            order: o && o.toLowerCase() || 'asc',\n            nulls: nf && `${nf[0].toLowerCase()} ${nf[2].toLowerCase()}`,\n          }\n        },\n      peg$c54 = function(t) {\n          // => { type: 'like'; table: table_ref_list; }\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c55 = function(e) {\n           // => create_like_table_simple & { parentheses?: boolean; }\n            e.parentheses = true;\n            return e;\n        },\n      peg$c56 = function(head, tail) {\n            // => create_definition[]\n            return createList(head, tail);\n          },\n      peg$c57 = \"auto_increment\",\n      peg$c58 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c59 = function(a) {\n          // => { auto_increment: 'auto_increment'; }\n          return { auto_increment: a.toLowerCase() }\n        },\n      peg$c60 = \"unique\",\n      peg$c61 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c62 = \"key\",\n      peg$c63 = peg$literalExpectation(\"KEY\", true),\n      peg$c64 = \"primary\",\n      peg$c65 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c66 = function(u) {\n          // => { unique_or_primary: 'unique' | 'primary key'; }\n          const unique_or_primary = []\n          if (u) unique_or_primary.push(u[0], u[2])\n          return { unique_or_primary: unique_or_primary.filter(v => v).join(' ').toLowerCase('') }\n        },\n      peg$c67 = function(co) {\n          // => { comment: keyword_comment; }\n          return { comment: co }\n        },\n      peg$c68 = function(ca) {\n          // => { collate: collate_expr; }\n          return { collate: ca }\n        },\n      peg$c69 = function(cf) {\n          // => { column_format: column_format; }\n          return { column_format: cf }\n        },\n      peg$c70 = function(s) {\n          // => { storage: storage }\n          return { storage: s }\n        },\n      peg$c71 = function(re) {\n          // => { reference_definition: reference_definition; }\n          return { reference_definition: re }\n        },\n      peg$c72 = function(t, s, v) {\n          // => { character_set: collate_expr }\n          return { character_set: { type: t, value: v, symbol: s }}\n        },\n      peg$c73 = function(head, tail) {\n          /*\n            => {\n              nullable?: column_constraint['nullable'];\n              default_val?: column_constraint['default_val'];\n              auto_increment?: 'auto_increment';\n              unique_or_primary?: 'unique' | 'primary key';\n              comment?: keyword_comment;\n              collate?: collate_expr;\n              column_format?: column_format;\n              storage?: storage;\n              reference_definition?: reference_definition;\n            }\n            */\n          let opt = head\n          for (let i = 0; i < tail.length; i++) {\n            opt = { ...opt, ...tail[i][1] }\n          }\n          return opt\n        },\n      peg$c74 = function(c, d, cdo) {\n            /*\n            => {\n              column: column_ref;\n              definition: data_type;\n              nullable: column_constraint['nullable'];\n              default_val: column_constraint['default_val'];\n              auto_increment?: 'auto_increment';\n              unique_or_primary?: 'unique' | 'primary key';\n              comment?: keyword_comment;\n              collate?: collate_expr;\n              column_format?: column_format;\n              storage?: storage;\n              reference_definition?: reference_definition;\n              resource: 'column';\n            }\n            */\n            columnList.add(`create::${c.table}::${c.column}`)\n            return {\n              column: c,\n              definition: d,\n              resource: 'column',\n              ...(cdo || {})\n            }\n          },\n      peg$c75 = function(n, df) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c76 = function(df, n) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c77 = function(s, ca) {\n          // => { type: 'collate'; symbol: '=' | null; value: ident; }\n          return {\n            type: 'collate',\n            symbol: s,\n            value: ca,\n          }\n        },\n      peg$c78 = \"column_format\",\n      peg$c79 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c80 = \"fixed\",\n      peg$c81 = peg$literalExpectation(\"FIXED\", true),\n      peg$c82 = \"dynamic\",\n      peg$c83 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c84 = \"default\",\n      peg$c85 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c86 = function(k, f) {\n          // => { type: 'column_format'; value: 'fixed' | 'dynamic' | 'default'; }\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c87 = \"storage\",\n      peg$c88 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c89 = \"disk\",\n      peg$c90 = peg$literalExpectation(\"DISK\", true),\n      peg$c91 = \"memory\",\n      peg$c92 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c93 = function(k, s) {\n          // => { type: 'storage'; value: 'disk' | 'memory' }\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c94 = function(ce) {\n          // => { type: 'default'; value: literal | expr; }\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c95 = function(head, tail) {\n          // => (ALTER_ALGORITHM | ALTER_LOCK)[]\n          return createList(head, tail, 1)\n        },\n      peg$c96 = function(a, r, t) {\n            /*\n            export interface drop_stmt_node {\n              type: 'drop';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<drop_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c97 = function(a, r, i, t, op) {\n            /*\n            export interface drop_index_stmt_node {\n              type: 'drop';\n              keyword: string;\n              name: column_ref;\n              table: table_name;\n              options?: drop_index_opt;\n            }\n            => AstStatement<drop_index_stmt_node>\n            */\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c98 = function(a, kw, t) {\n            /*\n            export interface truncate_stmt_node {\n              type: 'trucate';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<truncate_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c99 = function(d) {\n            /*\n            export interface use_stmt_node {\n              type: 'use';\n              db: ident;\n            }\n            => AstStatement<use_stmt_node>\n            */\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c100 = function(t, e) {\n            /*\n            export interface alter_table_stmt_node {\n              type: 'alter';\n              table: table_ref_list;\n              expr: alter_action_list;\n            }\n            => AstStatement<alter_table_stmt_node>\n            */\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c101 = function(head, tail) {\n            // => alter_action[]\n            return createList(head, tail);\n          },\n      peg$c102 = function(kc, cd) {\n            /*\n            => {\n              action: 'add';\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } & create_column_definition;\n            */\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c103 = function(kc, c) {\n            /* => {\n              action: 'drop';\n              collumn: column_ref;\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } */\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c104 = function(id) {\n             /* => {\n               action: 'add';\n               type: 'alter';\n               } & create_index_definition */\n            return {\n              action: 'add',\n              type: 'alter',\n              ...id,\n            }\n          },\n      peg$c105 = function(kw, tn) {\n             /* => {\n               action: 'rename';\n               type: 'alter';\n               resource: 'table';\n               keyword?: 'to' | 'as';\n               table: ident;\n               } */\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c106 = \"algorithm\",\n      peg$c107 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c108 = \"instant\",\n      peg$c109 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c110 = \"inplace\",\n      peg$c111 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c112 = \"copy\",\n      peg$c113 = peg$literalExpectation(\"COPY\", true),\n      peg$c114 = function(s, val) {\n          /* => {\n              type: 'alter';\n              keyword: 'algorithm';\n              resource: 'algorithm';\n              symbol?: '=';\n              algorithm: 'DEFAULT' | 'INSTANT' | 'INPLACE' | 'COPY';\n            }*/\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c115 = \"lock\",\n      peg$c116 = peg$literalExpectation(\"LOCK\", true),\n      peg$c117 = \"shared\",\n      peg$c118 = peg$literalExpectation(\"SHARED\", true),\n      peg$c119 = \"exclusive\",\n      peg$c120 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c121 = function(s, val) {\n          /* => {\n            type: 'alter';\n            keyword: 'lock';\n            resource: 'lock';\n            symbol?: '=';\n            lock: 'DEFAULT' | 'NONE' | 'SHARED' | 'EXCLUSIVE';\n          }*/\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c122 = function(kc, c, t, de, id) {\n             /* => {\n               index: column;\n               definition: cte_column_definition;\n               keyword: 'index' | 'key';\n               index_type?: index_type;\n               resource: 'index';\n               index_options?: index_options;\n             }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c123 = function(p, kc, c, de, id) {\n            /* => {\n                index: column;\n                definition: cte_column_definition;\n                keyword: 'fulltext' | 'spatial' | 'fulltext key' | 'spatial key' | 'fulltext index' | 'spatial index';\n                index_options?: index_options;\n                resource: 'index';\n              }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c124 = function(kc, c) {\n          // => { keyword: 'constraint'; constraint: ident; }\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c125 = \"primary key\",\n      peg$c126 = peg$literalExpectation(\"PRIMARY KEY\", true),\n      peg$c127 = function(kc, p, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'primary key';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c128 = function(kc, u, p, i, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'unique key' | 'unique' | 'unique index';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c129 = \"foreign key\",\n      peg$c130 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c131 = function(kc, p, i, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'FOREIGN KEY';\n            keyword: constraint_name['keyword'];\n            index?: column;\n            resource: 'constraint';\n            reference_definition?: reference_definition;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c132 = \"match full\",\n      peg$c133 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c134 = \"match partial\",\n      peg$c135 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c136 = \"match simple\",\n      peg$c137 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c138 = function(kc, t, de, m, od, ou) {\n          /* => {\n              definition: cte_column_definition;\n              table: table_ref_list;\n              keyword: 'references';\n              match: 'match full' | 'match partial' | 'match simple';\n              on_delete?: on_reference;\n              on_update?: on_reference;\n            }*/\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match:m && m.toLowerCase(),\n              on_delete: od,\n              on_update: ou,\n            }\n        },\n      peg$c139 = \"on delete\",\n      peg$c140 = peg$literalExpectation(\"ON DELETE\", true),\n      peg$c141 = \"on update\",\n      peg$c142 = peg$literalExpectation(\"ON UPDATE\", true),\n      peg$c143 = function(kw, ro) {\n          // => { type: 'on delete' | 'on update'; value: reference_option; }\n          return {\n            type: kw.toLowerCase(),\n            value: ro\n          }\n        },\n      peg$c144 = \"restrict\",\n      peg$c145 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c146 = \"cascade\",\n      peg$c147 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c148 = \"set null\",\n      peg$c149 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c150 = \"no action\",\n      peg$c151 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c152 = \"set default\",\n      peg$c153 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c154 = function(kc) {\n          // => 'restrict' | 'cascade' | 'set null' | 'no action' | 'set default'\n          return kc.toLowerCase()\n        },\n      peg$c155 = \"trigger\",\n      peg$c156 = peg$literalExpectation(\"TRIGGER\", true),\n      peg$c157 = \"before\",\n      peg$c158 = peg$literalExpectation(\"BEFORE\", true),\n      peg$c159 = \"after\",\n      peg$c160 = peg$literalExpectation(\"AFTER\", true),\n      peg$c161 = \"instead of\",\n      peg$c162 = peg$literalExpectation(\"INSTEAD OF\", true),\n      peg$c163 = \"on\",\n      peg$c164 = peg$literalExpectation(\"ON\", true),\n      peg$c165 = \"execute\",\n      peg$c166 = peg$literalExpectation(\"EXECUTE\", true),\n      peg$c167 = \"procedure\",\n      peg$c168 = peg$literalExpectation(\"PROCEDURE\", true),\n      peg$c169 = function(kw, kc, t, c, p, te, on, tn, fr, de, fe, tw, fc, fct) {\n          /*\n          => {\n            type: 'create';\n            constraint: string;\n            location: 'before' | 'after' | 'instead of';\n            events: trigger_event_list;\n            table: table_name;\n            from?: table_name;\n            deferrable?: trigger_deferrable;\n            for_each?: trigger_for_row;\n            when?: trigger_when;\n            execute: {\n              keyword: 'execute procedure';\n              expr: proc_func_call;\n            };\n            constraint_type: 'trigger';\n            keyword: 'trigger';\n            constraint_kw: 'constraint';\n            resource: 'constraint';\n          }\n          */\n          return {\n              type: 'create',\n              constraint: c,\n              location: p && p.toLowerCase(),\n              events: te,\n              table: tn,\n              from: fr && fr[2],\n              deferrable: de,\n              for_each: fe,\n              when: tw,\n              execute: {\n                keyword: 'execute procedure',\n                expr: fct\n              },\n              constraint_type: t && t.toLowerCase(),\n              keyword: t && t.toLowerCase(),\n              constraint_kw: kc && kc.toLowerCase(),\n              resource: 'constraint',\n            }\n        },\n      peg$c170 = function(kw) {\n          // => { keyword: 'insert' | 'delete' | 'truncate' }\n          const keyword = Array.isArray(kw) ? kw[0].toLowerCase() : kw.toLowerCase()\n          return {\n            keyword,\n          }\n        },\n      peg$c171 = \"of\",\n      peg$c172 = peg$literalExpectation(\"OF\", true),\n      peg$c173 = function(kw, a) {\n          // => { keyword: 'update'; args?: { keyword: 'of', columns: column_ref_list; }}\n          return {\n            keyword: kw && kw[0] && kw[0].toLowerCase(),\n            args: a && { keyword: a[0], columns: a[2] } || null\n          }\n        },\n      peg$c174 = function(head, tail) {\n          // => trigger_event[];\n          return createList(head, tail)\n        },\n      peg$c175 = \"not\",\n      peg$c176 = peg$literalExpectation(\"NOT\", true),\n      peg$c177 = \"deferrable\",\n      peg$c178 = peg$literalExpectation(\"DEFERRABLE\", true),\n      peg$c179 = \"initially immediate\",\n      peg$c180 = peg$literalExpectation(\"INITIALLY IMMEDIATE\", true),\n      peg$c181 = \"initially deferred\",\n      peg$c182 = peg$literalExpectation(\"INITIALLY DEFERRED\", true),\n      peg$c183 = function(kw, args) {\n          // => { keyword: 'deferrable' | 'not deferrable'; args: 'initially immediate' | 'initially deferred' }\n          return {\n            keyword: kw && kw[0] ? `${kw[0].toLowerCase()} deferrable` : 'deferrable',\n            args: args && args.toLowerCase(),\n          }\n        },\n      peg$c184 = \"for\",\n      peg$c185 = peg$literalExpectation(\"FOR\", true),\n      peg$c186 = \"each\",\n      peg$c187 = peg$literalExpectation(\"EACH\", true),\n      peg$c188 = \"row\",\n      peg$c189 = peg$literalExpectation(\"ROW\", true),\n      peg$c190 = \"statement\",\n      peg$c191 = peg$literalExpectation(\"STATEMENT\", true),\n      peg$c192 = function(kw, e, ob) {\n          // => { keyword: 'for' | 'for each'; args: 'row' | 'statement' }\n          return {\n            keyword: e ? `${kw.toLowerCase()} ${e.toLowerCase()}` : kw.toLowerCase(),\n            args: ob.toLowerCase()\n          }\n        },\n      peg$c193 = function(condition) {\n          // => { type: 'when'; cond: expr; parentheses: true; }\n          return {\n            type: 'when',\n            cond: condition,\n            parentheses: true,\n          }\n        },\n      peg$c194 = function(head, tail) {\n          // => table_option[]\n          return createList(head, tail)\n        },\n      peg$c195 = \"character\",\n      peg$c196 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c197 = \"set\",\n      peg$c198 = peg$literalExpectation(\"SET\", true),\n      peg$c199 = function() {\n          // => string\n          return 'CHARACTER SET'\n        },\n      peg$c200 = \"charset\",\n      peg$c201 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c202 = \"collate\",\n      peg$c203 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c204 = function(kw, t, s, v) {\n          /* => {\n            keyword: 'character set' | 'charset' | 'collate' | 'default character set' | 'default charset' | 'default collate';\n            symbol: '=';\n            value: ident_name;\n            } */\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c205 = \"avg_row_length\",\n      peg$c206 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c207 = \"key_block_size\",\n      peg$c208 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c209 = \"max_rows\",\n      peg$c210 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c211 = \"min_rows\",\n      peg$c212 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c213 = \"stats_sample_pages\",\n      peg$c214 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c215 = function(kw, s, v) {\n          /* => {\n            keyword: 'auto_increment' | 'avg_row_length' | 'key_block_size' | 'max_rows' | 'min_rows' | 'stats_sample_pages';\n            symbol: '=';\n            value: number; // <== literal_numeric['value']\n            } */\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c216 = \"connection\",\n      peg$c217 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c218 = function(kw, s, c) {\n          // => { keyword: 'connection' | 'comment'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c219 = \"compression\",\n      peg$c220 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c221 = \"'\",\n      peg$c222 = peg$literalExpectation(\"'\", false),\n      peg$c223 = \"zlib\",\n      peg$c224 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c225 = \"lz4\",\n      peg$c226 = peg$literalExpectation(\"LZ4\", true),\n      peg$c227 = function(kw, s, v) {\n          // => { keyword: 'compression'; symbol: '='; value: \"'ZLIB'\" | \"'LZ4'\" | \"'NONE'\" }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c228 = \"engine\",\n      peg$c229 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c230 = function(kw, s, c) {\n          // => { keyword: 'engine'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c231 = function(fsid) {\n             // => create_fulltext_spatial_index_definition & { action: 'add'; type: 'alter' }\n            return {\n              action: 'add',\n              type: 'alter',\n              ...fsid,\n            }\n          },\n      peg$c232 = function(t) {\n            /*\n            export interface rename_stmt_node {\n              type: 'rename';\n              table: table_to_list;\n            }\n             => AstStatement<rename_stmt_node>\n             */\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c233 = function(kw, a) {\n            /*\n            export interface set_stmt_node {\n              type: 'set';\n              expr: assign_stmt & { keyword?: 'GLOBAL' | 'SESSION' | 'LOCAL' | 'PERSIST' | 'PERSIST_ONLY'; };\n            }\n             => AstStatement<set_stmt_node>\n             */\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c234 = \"in\",\n      peg$c235 = peg$literalExpectation(\"IN\", true),\n      peg$c236 = \"access share\",\n      peg$c237 = peg$literalExpectation(\"ACCESS SHARE\", true),\n      peg$c238 = \"row share\",\n      peg$c239 = peg$literalExpectation(\"ROW SHARE\", true),\n      peg$c240 = \"row exclusive\",\n      peg$c241 = peg$literalExpectation(\"ROW EXCLUSIVE\", true),\n      peg$c242 = \"share update exclusive\",\n      peg$c243 = peg$literalExpectation(\"SHARE UPDATE EXCLUSIVE\", true),\n      peg$c244 = \"share row exclusive\",\n      peg$c245 = peg$literalExpectation(\"SHARE ROW EXCLUSIVE\", true),\n      peg$c246 = \"access exclusive\",\n      peg$c247 = peg$literalExpectation(\"ACCESS EXCLUSIVE\", true),\n      peg$c248 = \"share\",\n      peg$c249 = peg$literalExpectation(\"SHARE\", true),\n      peg$c250 = \"mode\",\n      peg$c251 = peg$literalExpectation(\"MODE\", true),\n      peg$c252 = function(m) {\n          // => { mode: string; }\n          return {\n            mode: `in ${m.toLowerCase()} mode`\n          }\n        },\n      peg$c253 = \"nowait\",\n      peg$c254 = peg$literalExpectation(\"NOWAIT\", true),\n      peg$c255 = function(k, t, lm, nw) {\n\n            /*\n            export interface lock_stmt_node {\n              type: 'lock';\n              keyword: 'lock';\n              tables: [[table_base], ...{table: table_ref}[]]; // see table_ref_list\n              lock_mode?: lock_mode;\n              nowait?: 'NOWAIT';\n            }\n             => AstStatement<lock_stmt_node>\n             */\n\n          if (t) t.forEach(tt => tableList.add(`lock::${tt.db}::${tt.table}`))\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: k && k.toLowerCase(),\n              tables: t.map((table) => ({ table })),\n              lock_mode: lm,\n              nowait: nw\n            }\n          }\n        },\n      peg$c256 = function(e) {\n          /*\n          export interface call_stmt_node {\n            type: 'call';\n            expr: proc_func_call;\n          }\n          => AstStatement<call_stmt_node>\n          */\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c257 = \"tables\",\n      peg$c258 = peg$literalExpectation(\"TABLES\", true),\n      peg$c259 = function() {\n          return {\n            /*\n              export interface show_stmt_node {\n                type: 'show';\n                keyword: 'tables';\n              }\n              => AstStatement<show_stmt_node>\n             */\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              keyword: 'tables'\n            }\n          }\n        },\n      peg$c260 = \"prepare\",\n      peg$c261 = peg$literalExpectation(\"PREPARE\", true),\n      peg$c262 = function(p, i) {\n          return {\n            /*\n              export interface deallocate_stmt_node {\n                type: 'deallocate';\n                keyword: 'PREPARE' | undefined;\n                expr: { type: 'default', value: string }\n              }\n              => AstStatement<deallocate_stmt_node>\n             */\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'deallocate',\n              keyword: p,\n              expr: { type: 'default', value: i }\n            },\n          }\n        },\n      peg$c263 = \";\",\n      peg$c264 = peg$literalExpectation(\";\", false),\n      peg$c265 = function() {\n          // => { type: 'select'; }\n          return {\n            type: 'select',\n          }\n        },\n      peg$c266 = \"(\",\n      peg$c267 = peg$literalExpectation(\"(\", false),\n      peg$c268 = \")\",\n      peg$c269 = peg$literalExpectation(\")\", false),\n      peg$c270 = function(s) {\n          /*\n          export interface select_stmt_node extends select_stmt_nake  {\n             parentheses_symbol: true;\n            }\n            => select_stmt_node\n            */\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c271 = function(head, tail) {\n            // => cte_definition[]\n            return createList(head, tail);\n          },\n      peg$c272 = function(cte) {\n            // => [cte_definition & {recursive: true; }]\n            cte.recursive = true;\n            return [cte]\n          },\n      peg$c273 = function(name, columns, stmt) {\n          // => { name: { type: 'default'; value: string; }; stmt: crud_stmt; columns?: cte_column_definition; }\n          if (typeof name === 'string') name = { type: 'default', value: name }\n            return { name, stmt: stmt.ast, columns };\n          },\n      peg$c274 = function(l) {\n          // => column_ref_list\n            return l\n          },\n      peg$c275 = function(d, o, c) {\n          // => {type: string; columns: column_ref_list;}\n          console.lo\n          return {\n            type: `${d} ON`,\n            columns: c\n          }\n        },\n      peg$c276 = function(d) {\n          // => { type: string | undefined; }\n          return {\n            type: d,\n          }\n        },\n      peg$c277 = function(cte, opts, d, c, ci, f, fi, w, g, h, o, l, win, li) {\n            /* => {\n                with?: with_clause;\n                type: 'select';\n                options?: option_clause;\n                distinct?: {type: string; columns?: column_list; };\n                columns: column_clause;\n                from?: from_clause;\n                into?: into_clause;\n                where?: where_clause;\n                groupby?: group_by_clause;\n                having?: having_clause;\n                orderby?: order_by_clause;\n                limit?: limit_clause;\n                window?: window_clause;\n              }*/\n            if ((ci && fi) || (ci && li) || (fi && li) || (ci && fi && li)) {\n              throw new Error('A given SQL statement can contain at most one INTO clause')\n            }\n            if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                with: cte,\n                type: 'select',\n                options: opts,\n                distinct: d,\n                columns: c,\n                into: {\n                  ...(ci || fi || li || {}),\n                  position: ci && 'column' || fi && 'from' || li && 'end'\n                },\n                from: f,\n                where: w,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window: win,\n            };\n        },\n      peg$c278 = function(head, tail) {\n          // => query_option[]\n          const opts = [head];\n          for (let i = 0, l = tail.length; i < l; ++i) {\n            opts.push(tail[i][1]);\n          }\n          return opts;\n        },\n      peg$c279 = function(option) {\n            // =>  'SQL_CALC_FOUND_ROWS'| 'SQL_CACHE'| 'SQL_NO_CACHE'| 'SQL_BIG_RESULT'| 'SQL_SMALL_RESULT'| 'SQL_BUFFER_RESULT'\n            return option;\n          },\n      peg$c280 = function(head, tail) {\n            // => 'ALL' | '*' | column_list_item[]\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c281 = function(head, tail) {\n          // => column_list_item[]\n            return createList(head, tail);\n          },\n      peg$c282 = function(n) {\n          // => { brackets: boolean, number: number }\n          return {\n            brackets: true,\n            number: n\n          }\n        },\n      peg$c283 = function(e, a) {\n          // => (expr || binary_expr) & { array_index: array_index }\n          if (a) e.array_index = a\n          return e\n        },\n      peg$c284 = function(c) {\n          // => { expr: expr; as: null; }\n          return { expr: c, as: null }\n        },\n      peg$c285 = function(e, s, t, tail, alias) {\n          // => { type: 'cast'; expr: expr; symbol: '::'; target: data_type;  as?: null; }\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t,\n            tail: tail && tail[0] && { operator: tail[0][1], expr: tail[0][3] },\n          }\n        },\n      peg$c286 = function(tbl) {\n            // => { type: 'star_ref'; expr: column_ref; as: null; }\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n              expr: {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c287 = function(e, alias) {\n          // => { type: 'expr'; expr: expr; as?: alias_clause; }\n            return { type: 'expr', expr: e, as: alias };\n          },\n      peg$c288 = function(i) { /*=>alias_ident*/ return i; },\n      peg$c289 = function(i) { /*=>ident*/ return i; },\n      peg$c290 = function(v) {\n          // => { keyword: 'var'; type: 'into'; expr: var_decl_list; }\n          return {\n            keyword: 'var',\n            type: 'into',\n            expr: v\n          }\n        },\n      peg$c291 = \"outfile\",\n      peg$c292 = peg$literalExpectation(\"OUTFILE\", true),\n      peg$c293 = \"dumpfile\",\n      peg$c294 = peg$literalExpectation(\"DUMPFILE\", true),\n      peg$c295 = function(k, f) {\n          // => { keyword: 'var'; type: 'into'; expr: literal_string | ident; }\n          return {\n            keyword: k,\n            type: 'into',\n            expr: f\n          }\n        },\n      peg$c296 = function(l) { /*=>table_ref_list*/return l; },\n      peg$c297 = function(head, tail) {\n          // => table_to_item[]\n            return createList(head, tail);\n          },\n      peg$c298 = function(head, tail) {\n          // => table_name[]\n            return [head, tail]\n          },\n      peg$c299 = \"btree\",\n      peg$c300 = peg$literalExpectation(\"BTREE\", true),\n      peg$c301 = \"hash\",\n      peg$c302 = peg$literalExpectation(\"HASH\", true),\n      peg$c303 = \"gist\",\n      peg$c304 = peg$literalExpectation(\"GIST\", true),\n      peg$c305 = \"gin\",\n      peg$c306 = peg$literalExpectation(\"GIN\", true),\n      peg$c307 = function(t) {\n          // => { keyword: 'using'; type: 'btree' | 'hash' | 'gist' | 'gin' }\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c308 = function(head, tail) {\n          // => index_option[]\n          return createList(head, tail)\n        },\n      peg$c309 = function(head, tail) {\n          // => index_option[]\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c310 = function(k, e, kbs) {\n          // => { type: 'key_block_size'; symbol: '='; expr: number; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          }\n        },\n      peg$c311 = function(k, e, kbs) {\n          // => { type: ident_name; symbol: '='; expr: number | {type: 'origin'; value: ident; }; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: typeof kbs === 'string' && { type: 'origin', value: kbs } || kbs\n          };\n        },\n      peg$c312 = \"with\",\n      peg$c313 = peg$literalExpectation(\"WITH\", true),\n      peg$c314 = \"parser\",\n      peg$c315 = peg$literalExpectation(\"PARSER\", true),\n      peg$c316 = function(pn) {\n          // => { type: 'with parser'; expr: ident_name }\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c317 = \"visible\",\n      peg$c318 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c319 = \"invisible\",\n      peg$c320 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c321 = function(k) {\n          // => { type: 'visible'; expr: 'visible' } | { type: 'invisible'; expr: 'invisible' }\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c322 = function(head, tail) {\n            // => [table_base, ...table_ref[]]\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c323 = function(t) { /* => table_base */ return t; },\n      peg$c324 = function(t) { /* => table_join */ return t; },\n      peg$c325 = function(op, t, head, tail) {\n            // => table_base & {join: join_op; using: ident_name[]; }\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c326 = function(op, t, expr) {\n          // => table_base & {join: join_op; on?: on_clause; }\n            t.join = op;\n            t.on = expr;\n            return t;\n          },\n      peg$c327 = function(op, stmt, alias, expr) {\n          /* => {\n            expr: union_stmt & { parentheses: true; };\n            as?: alias_clause;\n            join: join_op;\n            on?: on_clause;\n          }*/\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c328 = function() {\n          // => { type: 'dual' }\n            return {\n              type: 'dual'\n            };\n        },\n      peg$c329 = function(stmt, alias) {\n          // => { expr: value_clause; as?: alias_clause; }\n          return {\n            expr: { type: 'values', values: stmt },\n            as: alias\n          };\n        },\n      peg$c330 = \"lateral\",\n      peg$c331 = peg$literalExpectation(\"LATERAL\", true),\n      peg$c332 = function(l, stmt, alias) {\n          // => { prefix?: string; expr: union_stmt | value_clause; as?: alias_clause; }\n          if (Array.isArray(stmt)) stmt = { type: 'values', values: stmt }\n          stmt.parentheses = true;\n          return {\n            prefix: l,\n            expr: stmt,\n            as: alias\n          };\n        },\n      peg$c333 = function(l, e, alias) {\n          // => { prefix?: string; type: 'expr'; expr: expr; as?: alias_clause; }\n            return { prefix: l, type: 'expr', expr: e, as: alias };\n          },\n      peg$c334 = \"tablesample\",\n      peg$c335 = peg$literalExpectation(\"TABLESAMPLE\", true),\n      peg$c336 = \"repeatable\",\n      peg$c337 = peg$literalExpectation(\"REPEATABLE\", true),\n      peg$c338 = function(t, f, re, alias) {\n          // => table_name & { expr: expr, repeatable: literal_numeric; as?: alias_clause;}\n          return {\n            ...t,\n            as: alias,\n            tablesample: {\n              expr: f,\n              repeatable: re && re[4],\n            }\n          }\n        },\n      peg$c339 = function(t, alias) {\n          // => table_name & { as?: alias_clause; }\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                ...t,\n                as: alias\n              };\n            }\n          },\n      peg$c340 = function() { /* => 'LEFT JOIN' */ return 'LEFT JOIN'; },\n      peg$c341 = function() { /* =>  'RIGHT JOIN' */ return 'RIGHT JOIN'; },\n      peg$c342 = function() { /* => 'FULL JOIN' */ return 'FULL JOIN'; },\n      peg$c343 = \"cross\",\n      peg$c344 = peg$literalExpectation(\"CROSS\", true),\n      peg$c345 = function() { /* => 'CROSS JOIN' */ return 'CROSS JOIN'; },\n      peg$c346 = function() { /* => 'INNER JOIN' */ return 'INNER JOIN'; },\n      peg$c347 = function(dt, schema, tail) {\n            // => { db?: ident; schema?: ident, table: ident | '*'; }\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.schema = schema[3];\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c348 = function(dt) {\n          // => IGNORE\n            tableList.add(`select::${dt}::(.*)`);\n            return {\n              db: dt,\n              table: '*'\n            }\n          },\n      peg$c349 = function(dt, tail) {\n          // => IGNORE\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c350 = function(v) {\n          // => IGNORE\n            v.db = null;\n            v.table = v.name;\n            return v;\n          },\n      peg$c351 = function(e) { /* => or_and_where_expr */ return e; },\n      peg$c352 = function(e) { /* => binary_expr */ return e; },\n      peg$c353 = function(e) { /* => expr_list['value'] */ return e.value; },\n      peg$c354 = function(head, tail) {\n          // => column_ref[]\n            return createList(head, tail);\n          },\n      peg$c355 = function(e) { /* => expr */ return e; },\n      peg$c356 = function(l) {\n          // => { keyword: 'window'; type: 'window', expr: named_window_expr_list; }\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c357 = function(head, tail) {\n          // => named_window_expr[]\n            return createList(head, tail);\n          },\n      peg$c358 = function(nw, anw) {\n          // => { name: ident_name;  as_window_specification: as_window_specification; }\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c359 = function(ws) {\n          // => { window_specification: window_specification; parentheses: boolean }\n          return {\n            window_specification: ws || {},\n            parentheses: true\n          }\n        },\n      peg$c360 = function(bc, l, w) {\n          // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: string | null; }\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c361 = function(bc, l) {\n          // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: null }\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: null\n          }\n        },\n      peg$c362 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c363 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c364 = \"following\",\n      peg$c365 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c366 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c367 = \"preceding\",\n      peg$c368 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c369 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c370 = \"current\",\n      peg$c371 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c372 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c373 = \"unbounded\",\n      peg$c374 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c375 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c376 = function(bc) { /* => column_clause */ return bc; },\n      peg$c377 = function(l) { /* => order_by_list */ return l; },\n      peg$c378 = function(head, tail) {\n          // => order_by_element[]\n            return createList(head, tail);\n          },\n      peg$c379 = function(e, d, nl) {\n          // => { expr: expr; type: 'ASC' | 'DESC';  nulls: 'NULLS FIRST' | 'NULLS LAST' | undefined }\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          obj.nulls = nl && `${nl[0]} ${nl[2] ? nl[2] : obj.type === 'ASC' ? 'LAST' : 'FIRST' }`;\n          return obj;\n        },\n      peg$c380 = function(l, tail) {\n          // => { separator: 'offset' | ''; value: [number_or_param | { type: 'origin', value: 'all' }, number_or_param?] }\n            const res = []\n            if (l) res.push(typeof l[2] === 'string' ? { type: 'origin', value: 'all' } : l[2])\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c381 = function(t, l, w, r) {\n            /* export interface update_stmt_node {\n               type: 'update';\n               table: table_ref_list;\n               set: set_list;\n               where?: where_clause;\n               returning?: returning_stmt;\n            }\n           => AstStatement<update_stmt_node>\n           */\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table } = tableInfo\n              tableList.add(`update::${db}::${table}`)\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                returning: r,\n              }\n            };\n          },\n      peg$c382 = function(t, f, w) {\n            /*\n            export interface table_ref_addition extends table_name {\n              addition: true;\n              as?: alias_clause;\n            }\n             export interface delete_stmt_node {\n               type: 'delete';\n               table?: table_ref_list | [table_ref_addition];\n               where?: where_clause;\n            }\n           => AstStatement<delete_stmt_node>\n           */\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`delete::${info.db}::${info.table}`);\n              columnList.add(`delete::${info.table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w\n              }\n            };\n          },\n      peg$c383 = function(head, tail) {\n            // => set_item[]\n            return createList(head, tail);\n          },\n      peg$c384 = \"=\",\n      peg$c385 = peg$literalExpectation(\"=\", false),\n      peg$c386 = function(tbl, c, v) {\n            // => { column: ident; value: additive_expr; table?: ident;}\n            return { column: c, value: v, table: tbl && tbl[0] };\n          },\n      peg$c387 = function(tbl, c, v) {\n            // => { column: ident; value: column_ref; table?: ident; keyword: 'values' }\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c388 = \"conflict\",\n      peg$c389 = peg$literalExpectation(\"CONFLICT\", true),\n      peg$c390 = function(k, c) {\n          // => { type: 'returning'; columns: column_ref_list | column_ref; }\n          return {\n            type: k && k.toLowerCase() || 'returning',\n            columns: c === '*' && [{ type: 'columne_ref', table: null, column: '*' }] || c\n          }\n        },\n      peg$c391 = function(head, tail) {\n          // => ident_name[]\n            return createList(head, tail)\n          },\n      peg$c392 = function(v) {\n          // => value_item\n          return v\n        },\n      peg$c393 = function(ri, t, p, c, v, r) {\n            /*\n             export interface replace_insert_stmt_node {\n               type: 'insert' | 'replace';\n               table?: [table_name];\n               columns: column_list;\n               values: insert_value_clause;\n               partition?: insert_partition;\n               returning?: returning_stmt;\n            }\n           => AstStatement<replace_insert_stmt_node>\n           */\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                returning: r,\n              }\n            };\n          },\n      peg$c394 = function(ri, ig, it, t, p, v, r) {\n           // => AstStatement<replace_insert_stmt_node>\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n                returning: r,\n              }\n            };\n          },\n      peg$c395 = function() { /* => 'insert' */ return 'insert'; },\n      peg$c396 = function() { /* => 'replace' */return 'replace'; },\n      peg$c397 = function(l) { /* => value_list */ return l; },\n      peg$c398 = function(head, tail) {\n          // => value_item[]\n            return createList(head, tail);\n          },\n      peg$c399 = function(l) {\n          // => expr_list\n            return l;\n          },\n      peg$c400 = function(head, tail) {\n          // => { type: 'expr_list'; value: expr_item[] }\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c401 = function(e, u) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c402 = function(e) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: '',\n            }\n          },\n      peg$c403 = function(condition_list, otherwise) {\n            /* => {\n                type: 'case';\n                expr:  null;\n                // nb: Only the last element is a case_else\n                args: (case_when_then | case_else)[];\n              } */\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c404 = function(expr, condition_list, otherwise) {\n            /* => {\n                type: 'case';\n                expr: expr;\n                // nb: Only the last element is a case_else\n                args: (case_when_then | case_else)[];\n              } */\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c405 = function(condition, result) {\n          // => { type: 'when'; cond: binary_expr; result: expr; }\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c406 = function(result) {\n          // => { type: 'else'; condition?: never; result: expr; }\n          return { type: 'else', result: result };\n        },\n      peg$c407 = function(head, tail) {\n          /*\n          export type BINARY_OPERATORS = LOGIC_OPERATOR | 'OR' | 'AND' | multiplicative_operator | additive_operator\n            | arithmetic_comparison_operator\n            | 'IN' | 'NOT IN'\n            | 'BETWEEN' | 'NOT BETWEEN'\n            | 'IS' | 'IS NOT'\n            | 'LIKE'\n            | '@>' | '<@' | OPERATOR_CONCATENATION | DOUBLE_WELL_ARROW | WELL_ARROW | '?' | '?|' | '?&' | '#-'\n          export interface binary_expr {\n            type: 'binary_expr',\n            operator: BINARY_OPERATORS,\n            left: expr,\n            right: expr\n          }\n          => binary_expr\n          */\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c408 = function(op, tail) {\n          /*\n          export type UNARY_OPERATORS = '+' | '-' | 'EXISTS' | 'NOT EXISTS'  | 'NULL'\n          => {\n            type: 'unary_expr',\n            operator: UNARY_OPERATORS,\n            expr: expr;\n            parentheses?: boolean;\n          } */\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c409 = function(head, tail) {\n          // => binary_expr\n          const len = tail.length\n          let result = tail[len - 1][3]\n          for (let i = len - 1; i >= 0; i--) {\n            const left = i === 0 ? head : tail[i - 1][3]\n            result = createBinaryExpr(tail[i][1], left, result)\n          }\n          return result\n        },\n      peg$c410 = function(head, tail) {\n          // => binary_expr | { type: 'expr_list'; value: expr[] }\n          const len = tail.length\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < len; ++i) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' }\n            el.value = result\n            return el\n          }\n          return result\n        },\n      peg$c411 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c412 = \"!\",\n      peg$c413 = peg$literalExpectation(\"!\", false),\n      peg$c414 = function(expr) {\n          // => unary_expr\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c415 = function(left, rh) {\n          // => binary_expr\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c416 = function(op, stmt) {\n          // => unary_expr\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c417 = function(nk) { /* => 'NOT EXISTS' */ return nk[0] + ' ' + nk[2]; },\n      peg$c418 = function(l) {\n          // => { type: 'arithmetic'; tail: any }\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c419 = \">=\",\n      peg$c420 = peg$literalExpectation(\">=\", false),\n      peg$c421 = \">\",\n      peg$c422 = peg$literalExpectation(\">\", false),\n      peg$c423 = \"<=\",\n      peg$c424 = peg$literalExpectation(\"<=\", false),\n      peg$c425 = \"<>\",\n      peg$c426 = peg$literalExpectation(\"<>\", false),\n      peg$c427 = \"<\",\n      peg$c428 = peg$literalExpectation(\"<\", false),\n      peg$c429 = \"!=\",\n      peg$c430 = peg$literalExpectation(\"!=\", false),\n      peg$c431 = function(right) {\n          // => { op: 'IS'; right: additive_expr; }\n            return { op: 'IS', right: right };\n          },\n      peg$c432 = function(right) {\n          // => { type: 'origin'; value: string; }\n          const { db, table } = right.pop()\n          const tableName = table === '*' ? '*' : `\"${table}\"`\n          let tableStr = db ? `\"${db}\".${tableName}` : tableName\n          return { op: 'IS', right: {\n            type: 'default',\n            value: `DISTINCT FROM ${tableStr}`\n          }}\n        },\n      peg$c433 = function(right) {\n            // => { type: 'IS NOT'; right: additive_expr; }\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c434 = function(op, begin, end) {\n          // => { op: 'BETWEEN' | 'NOT BETWEEN'; right: { type: 'expr_list'; value: [expr, expr] }  }\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c435 = function(nk) { /* => 'NOT BETWEEN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c436 = function(nk) { /* => 'LIKE' */ return nk[0] + ' ' + nk[2]; },\n      peg$c437 = \"similar\",\n      peg$c438 = peg$literalExpectation(\"SIMILAR\", true),\n      peg$c439 = function() {\n          // => 'SIMILAR TO'\n          return 'SIMILAR TO'\n        },\n      peg$c440 = function() {\n          // => 'NOT SIMILAR TO'\n          return 'NOT SIMILAR TO'\n        },\n      peg$c441 = \"escape\",\n      peg$c442 = peg$literalExpectation(\"ESCAPE\", true),\n      peg$c443 = function(kw, c) {\n          // => { type: 'ESCAPE'; value: literal_string }\n          return {\n            type: 'ESCAPE',\n            value: c,\n          }\n        },\n      peg$c444 = function(nk) { /* => 'NOT IN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c445 = function(op, right, es) {\n           // => { op: like_op; right: (literal | comparison_expr) & { escape?: escape_op }; }\n            if (es) right.escape = es\n            return { op: op, right: right };\n          },\n      peg$c446 = function(op, l) {\n          // => {op: in_op; right: expr_list | var_decl | literal_string; }\n            return { op: op, right: l };\n          },\n      peg$c447 = function(op, e) {\n          // => IGNORE\n            return { op: op, right: e };\n          },\n      peg$c448 = \"@>\",\n      peg$c449 = peg$literalExpectation(\"@>\", false),\n      peg$c450 = \"<@\",\n      peg$c451 = peg$literalExpectation(\"<@\", false),\n      peg$c452 = \"?\",\n      peg$c453 = peg$literalExpectation(\"?\", false),\n      peg$c454 = \"?|\",\n      peg$c455 = peg$literalExpectation(\"?|\", false),\n      peg$c456 = \"?&\",\n      peg$c457 = peg$literalExpectation(\"?&\", false),\n      peg$c458 = \"#-\",\n      peg$c459 = peg$literalExpectation(\"#-\", false),\n      peg$c460 = function(s, c) {\n          // => { op: string; right: expr }\n          return {\n            op: s,\n            right: c && c.expr || c\n          }\n        },\n      peg$c461 = \"+\",\n      peg$c462 = peg$literalExpectation(\"+\", false),\n      peg$c463 = \"-\",\n      peg$c464 = peg$literalExpectation(\"-\", false),\n      peg$c465 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c466 = \"*\",\n      peg$c467 = peg$literalExpectation(\"*\", false),\n      peg$c468 = \"/\",\n      peg$c469 = peg$literalExpectation(\"/\", false),\n      peg$c470 = \"%\",\n      peg$c471 = peg$literalExpectation(\"%\", false),\n      peg$c472 = function(c, a) {\n          // => column_ref\n          c.array_index = a\n          return c\n        },\n      peg$c473 = function(list) {\n          // => or_and_where_expr\n              list.parentheses = true;\n              return list;\n          },\n      peg$c474 = \"$\",\n      peg$c475 = peg$literalExpectation(\"$\", false),\n      peg$c476 = function(p, n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `$<${n.value}>`,\n          }\n        },\n      peg$c477 = function(p, n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `$${n.value}`,\n          }\n        },\n      peg$c478 = \"e\",\n      peg$c479 = peg$literalExpectation(\"E\", true),\n      peg$c480 = function(n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `E'${n.join('')}'`\n          }\n        },\n      peg$c481 = function(tbl) {\n          // => IGNORE\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n            }\n          },\n      peg$c482 = function(tbl, col, a) {\n          // => IGNORE\n            const tableName = tbl && tbl[0] || null\n            columnList.add(`select::${tableName}::${col}`)\n            return {\n              type: 'column_ref',\n              table: tableName,\n              column: col,\n              arrows: a.map(item => item[0]),\n              properties: a.map(item => item[2])\n            };\n        },\n      peg$c483 = function(schema, tbl, col) {\n          /* => {\n              type: 'column_ref';\n              schema: string;\n              table: string;\n              column: column | '*';\n              arrows?: ('->>' | '->')[];\n              property?: (literal_string | literal_numeric)[];\n            } */\n            columnList.add(`select::${schema}.${tbl[3]}::${col[3]}`);\n            return {\n              type: 'column_ref',\n              schema: schema,\n              table: tbl[3],\n              column: col[3]\n            };\n          },\n      peg$c484 = function(tbl, col) {\n            /* => {\n              type: 'column_ref';\n              table: ident;\n              column: column | '*';\n              arrows?: ('->>' | '->')[];\n              property?: (literal_string | literal_numeric)[];\n            } */\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c485 = function(col) {\n          // => IGNORE\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c486 = function(head, tail) {\n          // => column[]\n            return createList(head, tail);\n          },\n      peg$c487 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c488 = function(name) {\n            // => ident_name\n            return name;\n          },\n      peg$c489 = function(name) {\n            // => indent_name\n            return name;\n          },\n      peg$c490 = function(name) { if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\"); return false },\n      peg$c491 = function(name, c) {\n          // => string\n          return `${name}(${c.join(', ')})`\n        },\n      peg$c492 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c493 = function(name) {\n            // => string\n            return name;\n          },\n      peg$c494 = function(name) {\n            // => IGNORE\n            return name;\n          },\n      peg$c495 = \"\\\"\",\n      peg$c496 = peg$literalExpectation(\"\\\"\", false),\n      peg$c497 = /^[^\"]/,\n      peg$c498 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c499 = function(chars) { /* => string */ return chars.join(''); },\n      peg$c500 = /^[^']/,\n      peg$c501 = peg$classExpectation([\"'\"], true, false),\n      peg$c502 = \"`\",\n      peg$c503 = peg$literalExpectation(\"`\", false),\n      peg$c504 = /^[^`]/,\n      peg$c505 = peg$classExpectation([\"`\"], true, false),\n      peg$c506 = function(name) { /* => string */ return name; },\n      peg$c507 = function(start, parts) { /* => string */ return start + parts.join(''); },\n      peg$c508 = function(start, parts) {\n            // => string\n            return start + parts.join('');\n          },\n      peg$c509 = /^[A-Za-z_]/,\n      peg$c510 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c511 = /^[A-Za-z0-9_\\-]/,\n      peg$c512 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c513 = /^[A-Za-z0-9_]/,\n      peg$c514 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c515 = \":\",\n      peg$c516 = peg$literalExpectation(\":\", false),\n      peg$c517 = function(l) {\n          // => { type: 'param'; value: ident_name }\n            return { type: 'param', value: l[1] };\n          },\n      peg$c518 = function(kw, l) {\n          // => { type: 'on update'; keyword: string; parentheses: boolean; expr: expr }\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c519 = function(kw) {\n          // => { type: 'on update'; keyword: string; }\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c520 = \"over\",\n      peg$c521 = peg$literalExpectation(\"OVER\", true),\n      peg$c522 = function(aws) {\n          // => { type: 'windows'; as_window_specification: as_window_specification }\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c523 = function(bc, l) {\n          // => { partitionby: partition_by_clause; orderby: order_by_clause }\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c524 = \"filter\",\n      peg$c525 = peg$literalExpectation(\"FILTER\", true),\n      peg$c526 = function(wc) {\n          // => { keyword: 'filter'; parentheses: true, where: where_clause }\n          return {\n            keyword: 'filter',\n            parentheses: true,\n            where: wc,\n          }\n        },\n      peg$c527 = function(e, f) {\n          // => { type: 'aggr_func'; name: string; args: { expr: additive_expr } | count_arg; over: over_partition; filter?: aggr_filter; }\n          if (f) e.filter = f\n          return e\n        },\n      peg$c528 = function(name, over) {\n          // => { type: 'window_func'; name: string; over: over_partition }\n          return {\n            type: 'window_func',\n            name: name,\n            over: over\n          }\n        },\n      peg$c529 = function(name, l, cn, over) {\n          // => { type: 'window_func'; name: string; args: expr_list; consider_nulls: null | string; over: over_partition }\n          return {\n            type: 'window_func',\n            name: name,\n            args: l,\n            over: over,\n            consider_nulls: cn\n          };\n        },\n      peg$c530 = function(name, l, cn, over) {\n          // => window_fun_laglead\n          return {\n            type: 'window_func',\n            name: name,\n            args: {\n              type: 'expr_list', value: [l]\n            },\n            over: over,\n            consider_nulls: cn\n          };\n        },\n      peg$c531 = \"first_value\",\n      peg$c532 = peg$literalExpectation(\"FIRST_VALUE\", true),\n      peg$c533 = \"last_value\",\n      peg$c534 = peg$literalExpectation(\"LAST_VALUE\", true),\n      peg$c535 = \"row_number\",\n      peg$c536 = peg$literalExpectation(\"ROW_NUMBER\", true),\n      peg$c537 = \"dense_rank\",\n      peg$c538 = peg$literalExpectation(\"DENSE_RANK\", true),\n      peg$c539 = \"rank\",\n      peg$c540 = peg$literalExpectation(\"RANK\", true),\n      peg$c541 = \"lag\",\n      peg$c542 = peg$literalExpectation(\"LAG\", true),\n      peg$c543 = \"lead\",\n      peg$c544 = peg$literalExpectation(\"LEAD\", true),\n      peg$c545 = \"nth_value\",\n      peg$c546 = peg$literalExpectation(\"NTH_VALUE\", true),\n      peg$c547 = \"ignore\",\n      peg$c548 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c549 = \"respect\",\n      peg$c550 = peg$literalExpectation(\"RESPECT\", true),\n      peg$c551 = function(v) {\n          // => string\n          return v.toUpperCase() + ' NULLS'\n        },\n      peg$c552 = function(name, e, bc) {\n          // => { type: 'aggr_func'; name: 'SUM' | 'MAX' | 'MIN' | 'AVG'; args: { expr: additive_expr }; over: over_partition }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc\n            };\n          },\n      peg$c553 = function(name, arg, bc) {\n          // => { type: 'aggr_func'; name: 'COUNT' | 'GROUP_CONCAT'; args:count_arg; over: over_partition }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c554 = \"percentile_cont\",\n      peg$c555 = peg$literalExpectation(\"percentile_cont\", true),\n      peg$c556 = \"percentile_disc\",\n      peg$c557 = peg$literalExpectation(\"percentile_disc\", true),\n      peg$c558 = \"within\",\n      peg$c559 = peg$literalExpectation(\"within\", true),\n      peg$c560 = function(name, arg, or, bc) {\n         // => { type: 'aggr_func'; name: 'PERCENTILE_CONT' | 'PERCENTILE_DISC'; args: literal_numeric / literal_array; within_group_orderby: order_by_clause; over?: over_partition }\n          return {\n              type: 'aggr_func',\n              name: name.toUpperCase(),\n              args: {\n                expr: arg\n              },\n              within_group_orderby: or,\n              over: bc\n            };\n        },\n      peg$c561 = peg$literalExpectation(\"mode\", true),\n      peg$c562 = function(name, or, bc) {\n          // => { type: 'aggr_func'; name: 'MODE'; args: literal_numeric / literal_array; within_group_orderby: order_by_clause; over?: over_partition }\n          return {\n              type: 'aggr_func',\n              name: name.toUpperCase(),\n              args: { expr: {} },\n              within_group_orderby: or,\n              over: bc\n            };\n        },\n      peg$c563 = \"SEPARATOR\",\n      peg$c564 = peg$literalExpectation(\"SEPARATOR\", false),\n      peg$c565 = function(kw, s) {\n          // => { keyword: string | null; value: literal_string; }\n          return {\n            keyword: kw,\n            value: s\n          }\n        },\n      peg$c566 = function(d, c) { /* => { distinct: 'DISTINCT'; expr: column_ref; } */  return { distinct: d, expr: c }; },\n      peg$c567 = function(d, c, or, s) {  /* => { distinct: 'DISTINCT'; expr: expr; orderby?: order_by_clause; parentheses: boolean; separator?: concat_separator; } */ return { distinct: d, expr: c, orderby: or, parentheses: true, separator: s }; },\n      peg$c568 = function(e) { /* => { expr: star_expr } */ return { expr: e }; },\n      peg$c569 = function(pre, name, arg, o) {\n          // => { type: 'aggr_func'; args:count_arg; name: 'ARRAY_AGG'; orderby?: order_by_clause  }\n            return {\n              type: 'aggr_func',\n              name: pre ? `${pre[0]}.${name}` : name,\n              args: arg,\n              orderby: o,\n            };\n          },\n      peg$c570 = function() { /* => { type: 'star'; value: '*' } */ return { type: 'star', value: '*' }; },\n      peg$c571 = \"both\",\n      peg$c572 = peg$literalExpectation(\"BOTH\", true),\n      peg$c573 = \"leading\",\n      peg$c574 = peg$literalExpectation(\"LEADING\", true),\n      peg$c575 = \"trailing\",\n      peg$c576 = peg$literalExpectation(\"TRAILING\", true),\n      peg$c577 = function(p, rm, k) {\n          // => expr_list\n          let value = []\n          if (p) value.push({type: 'origin', value: p })\n          if (rm) value.push(rm)\n          value.push({type: 'origin', value: 'from' })\n          return {\n            type: 'expr_list',\n            value,\n          }\n        },\n      peg$c578 = \"trim\",\n      peg$c579 = peg$literalExpectation(\"trim\", true),\n      peg$c580 = function(tr, s) {\n          // => { type: 'function'; name: string; args: expr_list; }\n          let args = tr || { type: 'expr_list', value: [] }\n          args.value.push(s)\n          return {\n              type: 'function',\n              name: 'TRIM',\n              args,\n          };\n        },\n      peg$c581 = function(name, l) {\n            // => { type: 'function'; name: string; args: expr_list; }\n            if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] }\n            };\n          },\n      peg$c582 = function(name, l, bc) {\n          // => { type: 'function'; name: string; args: expr_list; over?: over_partition; }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c583 = function(f, up) {\n          // => { type: 'function'; name: string; over?: on_update_current_timestamp; }\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c584 = \"century\",\n      peg$c585 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c586 = \"day\",\n      peg$c587 = peg$literalExpectation(\"DAY\", true),\n      peg$c588 = \"date\",\n      peg$c589 = peg$literalExpectation(\"DATE\", true),\n      peg$c590 = \"decade\",\n      peg$c591 = peg$literalExpectation(\"DECADE\", true),\n      peg$c592 = \"dow\",\n      peg$c593 = peg$literalExpectation(\"DOW\", true),\n      peg$c594 = \"doy\",\n      peg$c595 = peg$literalExpectation(\"DOY\", true),\n      peg$c596 = \"epoch\",\n      peg$c597 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c598 = \"hour\",\n      peg$c599 = peg$literalExpectation(\"HOUR\", true),\n      peg$c600 = \"isodow\",\n      peg$c601 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c602 = \"isoyear\",\n      peg$c603 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c604 = \"microseconds\",\n      peg$c605 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c606 = \"millennium\",\n      peg$c607 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c608 = \"milliseconds\",\n      peg$c609 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c610 = \"minute\",\n      peg$c611 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c612 = \"month\",\n      peg$c613 = peg$literalExpectation(\"MONTH\", true),\n      peg$c614 = \"quarter\",\n      peg$c615 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c616 = \"second\",\n      peg$c617 = peg$literalExpectation(\"SECOND\", true),\n      peg$c618 = \"timezone\",\n      peg$c619 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c620 = \"timezone_hour\",\n      peg$c621 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c622 = \"timezone_minute\",\n      peg$c623 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c624 = \"week\",\n      peg$c625 = peg$literalExpectation(\"WEEK\", true),\n      peg$c626 = \"year\",\n      peg$c627 = peg$literalExpectation(\"YEAR\", true),\n      peg$c628 = function(f) {\n          // => 'string'\n          return f\n        },\n      peg$c629 = function(kw, f, t, s) {\n          // => { type: 'extract'; args: { field: extract_filed; cast_type: 'TIMESTAMP' | 'INTERVAL' | 'TIME'; source: expr; }}\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c630 = function(e, s, t, alias) {\n          /* => {\n              as?: alias_clause,\n              type: 'cast';\n              expr: literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param\n                | expr;\n              symbol: '::' | 'as',\n              target: data_type;\n            }\n            */\n          e.parentheses = true\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t,\n          }\n        },\n      peg$c631 = function(e, s, t, alias) {\n          /* => {\n              as?: alias_clause,\n              type: 'cast';\n              expr: literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param\n                | expr;\n              symbol: '::' | 'as',\n              target: data_type;\n            }\n            */\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c632 = function(e, t) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c633 = function(e, precision) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c634 = function(e, precision, scale) {\n            // => IGNORE\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c635 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c636 = function(s, c) {\n          /*\n            => {\n              expr_list: expr_list | {type: 'origin', value: ident },\n              type: string,\n              keyword: string,\n              brackets: boolean\n            }\n          */\n          return {\n            expr_list: c || { type: 'origin', value: '' },\n            type: 'array',\n            keyword: 'array',\n            brackets: true\n          }\n        },\n      peg$c637 = function(head, tail) {\n          // => literal[]\n            return createList(head, tail);\n          },\n      peg$c638 = function() {\n          // => { type: 'null'; value: null }\n            return { type: 'null', value: null };\n          },\n      peg$c639 = function() {\n          // => { type: 'not null'; value: 'not null' }\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c640 = function() {\n            // => { type: 'bool', value: true }\n            return { type: 'bool', value: true };\n          },\n      peg$c641 = function() {\n            //=> { type: 'bool', value: false }\n            return { type: 'bool', value: false };\n          },\n      peg$c642 = /^[\\n]/,\n      peg$c643 = peg$classExpectation([\"\\n\"], false, false),\n      peg$c644 = function(ca, fs) {\n            // => { type: 'single_quote_string'; value: string; }\n            return {\n              type: 'single_quote_string',\n              value: `${ca[1].join('')}${fs[1].join('')}`\n            };\n          },\n      peg$c645 = function(ca) {\n            // => { type: 'single_quote_string'; value: string; }\n            return {\n              type: 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c646 = function(ca) {\n            // => { type: 'string'; value: string; }\n            return {\n              type: 'double_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c647 = function(type, ca) {\n            // => { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c648 = function(type, ca) {\n          // => { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c649 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c650 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c651 = /^[^'\\\\]/,\n      peg$c652 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c653 = \"\\\\'\",\n      peg$c654 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c655 = function() { return \"\\\\'\";  },\n      peg$c656 = \"\\\\\\\"\",\n      peg$c657 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c658 = function() { return '\\\\\"';  },\n      peg$c659 = \"\\\\\\\\\",\n      peg$c660 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c661 = function() { return \"\\\\\\\\\"; },\n      peg$c662 = \"\\\\/\",\n      peg$c663 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c664 = function() { return \"\\\\/\";  },\n      peg$c665 = \"\\\\b\",\n      peg$c666 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c667 = function() { return \"\\b\"; },\n      peg$c668 = \"\\\\f\",\n      peg$c669 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c670 = function() { return \"\\f\"; },\n      peg$c671 = \"\\\\n\",\n      peg$c672 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c673 = function() { return \"\\n\"; },\n      peg$c674 = \"\\\\r\",\n      peg$c675 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c676 = function() { return \"\\r\"; },\n      peg$c677 = \"\\\\t\",\n      peg$c678 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c679 = function() { return \"\\t\"; },\n      peg$c680 = \"\\\\u\",\n      peg$c681 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c682 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c683 = \"\\\\\",\n      peg$c684 = peg$literalExpectation(\"\\\\\", false),\n      peg$c685 = function() { return \"\\\\\"; },\n      peg$c686 = \"''\",\n      peg$c687 = peg$literalExpectation(\"''\", false),\n      peg$c688 = function() { return \"''\" },\n      peg$c689 = /^[\\n\\r]/,\n      peg$c690 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c691 = function(n) {\n          // => number | { type: 'bigint'; value: string; }\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c692 = function(int_, frac, exp) {\n          const numStr = (int_ || '') + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c693 = function(int_, frac) {\n          // => IGNORE\n          const numStr = (int_ || '') + frac\n          if (int_ && isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c694 = function(int_, exp) {\n          // => IGNORE\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c695 = function(int_) {\n          // => IGNORE\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c696 = function(op, digits) { return op + digits; },\n      peg$c697 = function(op, digit) { return op + digit; },\n      peg$c698 = \".\",\n      peg$c699 = peg$literalExpectation(\".\", false),\n      peg$c700 = function(digits) { return \".\" + digits; },\n      peg$c701 = function(e, digits) { return e + digits; },\n      peg$c702 = function(digits) { return digits.join(\"\"); },\n      peg$c703 = /^[0-9]/,\n      peg$c704 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c705 = /^[0-9a-fA-F]/,\n      peg$c706 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c707 = /^[eE]/,\n      peg$c708 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c709 = /^[+\\-]/,\n      peg$c710 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c711 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c712 = \"null\",\n      peg$c713 = peg$literalExpectation(\"NULL\", true),\n      peg$c714 = \"not null\",\n      peg$c715 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c716 = \"true\",\n      peg$c717 = peg$literalExpectation(\"TRUE\", true),\n      peg$c718 = \"to\",\n      peg$c719 = peg$literalExpectation(\"TO\", true),\n      peg$c720 = \"false\",\n      peg$c721 = peg$literalExpectation(\"FALSE\", true),\n      peg$c722 = \"show\",\n      peg$c723 = peg$literalExpectation(\"SHOW\", true),\n      peg$c724 = \"drop\",\n      peg$c725 = peg$literalExpectation(\"DROP\", true),\n      peg$c726 = function() { return 'DROP'; },\n      peg$c727 = \"use\",\n      peg$c728 = peg$literalExpectation(\"USE\", true),\n      peg$c729 = \"alter\",\n      peg$c730 = peg$literalExpectation(\"ALTER\", true),\n      peg$c731 = \"select\",\n      peg$c732 = peg$literalExpectation(\"SELECT\", true),\n      peg$c733 = \"update\",\n      peg$c734 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c735 = \"create\",\n      peg$c736 = peg$literalExpectation(\"CREATE\", true),\n      peg$c737 = \"temporary\",\n      peg$c738 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c739 = function() { return 'TEMPORARY'; },\n      peg$c740 = \"temp\",\n      peg$c741 = peg$literalExpectation(\"TEMP\", true),\n      peg$c742 = function() { return 'TEMP'; },\n      peg$c743 = \"delete\",\n      peg$c744 = peg$literalExpectation(\"DELETE\", true),\n      peg$c745 = \"insert\",\n      peg$c746 = peg$literalExpectation(\"INSERT\", true),\n      peg$c747 = \"RECURSIVE\",\n      peg$c748 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c749 = \"replace\",\n      peg$c750 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c751 = \"returning\",\n      peg$c752 = peg$literalExpectation(\"RETURNING\", true),\n      peg$c753 = function() { return 'RETURNING' },\n      peg$c754 = \"rename\",\n      peg$c755 = peg$literalExpectation(\"RENAME\", true),\n      peg$c756 = \"explain\",\n      peg$c757 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c758 = \"partition\",\n      peg$c759 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c760 = function() { return 'PARTITION' },\n      peg$c761 = \"into\",\n      peg$c762 = peg$literalExpectation(\"INTO\", true),\n      peg$c763 = \"from\",\n      peg$c764 = peg$literalExpectation(\"FROM\", true),\n      peg$c765 = \"as\",\n      peg$c766 = peg$literalExpectation(\"AS\", true),\n      peg$c767 = \"table\",\n      peg$c768 = peg$literalExpectation(\"TABLE\", true),\n      peg$c769 = function() { return 'TABLE'; },\n      peg$c770 = \"database\",\n      peg$c771 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c772 = function() { return 'DATABASE'; },\n      peg$c773 = \"scheme\",\n      peg$c774 = peg$literalExpectation(\"SCHEME\", true),\n      peg$c775 = function() { return 'SCHEME'; },\n      peg$c776 = \"sequence\",\n      peg$c777 = peg$literalExpectation(\"SEQUENCE\", true),\n      peg$c778 = function() { return 'SEQUENCE'; },\n      peg$c779 = \"tablespace\",\n      peg$c780 = peg$literalExpectation(\"TABLESPACE\", true),\n      peg$c781 = function() { return 'TABLESPACE'; },\n      peg$c782 = function() { return 'COLLATE'; },\n      peg$c783 = \"deallocate\",\n      peg$c784 = peg$literalExpectation(\"DEALLOCATE\", true),\n      peg$c785 = function() { return 'DEALLOCATE'; },\n      peg$c786 = \"left\",\n      peg$c787 = peg$literalExpectation(\"LEFT\", true),\n      peg$c788 = \"right\",\n      peg$c789 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c790 = \"full\",\n      peg$c791 = peg$literalExpectation(\"FULL\", true),\n      peg$c792 = \"inner\",\n      peg$c793 = peg$literalExpectation(\"INNER\", true),\n      peg$c794 = \"join\",\n      peg$c795 = peg$literalExpectation(\"JOIN\", true),\n      peg$c796 = \"outer\",\n      peg$c797 = peg$literalExpectation(\"OUTER\", true),\n      peg$c798 = \"union\",\n      peg$c799 = peg$literalExpectation(\"UNION\", true),\n      peg$c800 = \"values\",\n      peg$c801 = peg$literalExpectation(\"VALUES\", true),\n      peg$c802 = \"using\",\n      peg$c803 = peg$literalExpectation(\"USING\", true),\n      peg$c804 = \"where\",\n      peg$c805 = peg$literalExpectation(\"WHERE\", true),\n      peg$c806 = \"group\",\n      peg$c807 = peg$literalExpectation(\"GROUP\", true),\n      peg$c808 = \"by\",\n      peg$c809 = peg$literalExpectation(\"BY\", true),\n      peg$c810 = \"order\",\n      peg$c811 = peg$literalExpectation(\"ORDER\", true),\n      peg$c812 = \"having\",\n      peg$c813 = peg$literalExpectation(\"HAVING\", true),\n      peg$c814 = \"window\",\n      peg$c815 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c816 = \"limit\",\n      peg$c817 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c818 = \"offset\",\n      peg$c819 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c820 = function() { return 'OFFSET' },\n      peg$c821 = \"asc\",\n      peg$c822 = peg$literalExpectation(\"ASC\", true),\n      peg$c823 = function() { return 'ASC'; },\n      peg$c824 = \"desc\",\n      peg$c825 = peg$literalExpectation(\"DESC\", true),\n      peg$c826 = function() { return 'DESC'; },\n      peg$c827 = \"all\",\n      peg$c828 = peg$literalExpectation(\"ALL\", true),\n      peg$c829 = function() { return 'ALL'; },\n      peg$c830 = \"distinct\",\n      peg$c831 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c832 = function() { return 'DISTINCT';},\n      peg$c833 = \"between\",\n      peg$c834 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c835 = function() { return 'BETWEEN'; },\n      peg$c836 = function() { return 'IN'; },\n      peg$c837 = \"is\",\n      peg$c838 = peg$literalExpectation(\"IS\", true),\n      peg$c839 = function() { return 'IS'; },\n      peg$c840 = \"like\",\n      peg$c841 = peg$literalExpectation(\"LIKE\", true),\n      peg$c842 = function() { return 'LIKE'; },\n      peg$c843 = \"ilike\",\n      peg$c844 = peg$literalExpectation(\"ILIKE\", true),\n      peg$c845 = function() { return 'ILIKE'; },\n      peg$c846 = \"exists\",\n      peg$c847 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c848 = function() { /* => 'EXISTS' */ return 'EXISTS'; },\n      peg$c849 = function() { return 'NOT'; },\n      peg$c850 = \"and\",\n      peg$c851 = peg$literalExpectation(\"AND\", true),\n      peg$c852 = function() { return 'AND'; },\n      peg$c853 = \"or\",\n      peg$c854 = peg$literalExpectation(\"OR\", true),\n      peg$c855 = function() { return 'OR'; },\n      peg$c856 = \"array\",\n      peg$c857 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c858 = function() { return 'ARRAY'; },\n      peg$c859 = \"array_agg\",\n      peg$c860 = peg$literalExpectation(\"ARRAY_AGG\", true),\n      peg$c861 = function() { return 'ARRAY_AGG'; },\n      peg$c862 = \"count\",\n      peg$c863 = peg$literalExpectation(\"COUNT\", true),\n      peg$c864 = function() { return 'COUNT'; },\n      peg$c865 = \"group_concat\",\n      peg$c866 = peg$literalExpectation(\"GROUP_CONCAT\", true),\n      peg$c867 = function() { return 'GROUP_CONCAT'; },\n      peg$c868 = \"max\",\n      peg$c869 = peg$literalExpectation(\"MAX\", true),\n      peg$c870 = function() { return 'MAX'; },\n      peg$c871 = \"min\",\n      peg$c872 = peg$literalExpectation(\"MIN\", true),\n      peg$c873 = function() { return 'MIN'; },\n      peg$c874 = \"sum\",\n      peg$c875 = peg$literalExpectation(\"SUM\", true),\n      peg$c876 = function() { return 'SUM'; },\n      peg$c877 = \"avg\",\n      peg$c878 = peg$literalExpectation(\"AVG\", true),\n      peg$c879 = function() { return 'AVG'; },\n      peg$c880 = \"extract\",\n      peg$c881 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c882 = function() { return 'EXTRACT'; },\n      peg$c883 = \"call\",\n      peg$c884 = peg$literalExpectation(\"CALL\", true),\n      peg$c885 = function() { return 'CALL'; },\n      peg$c886 = \"case\",\n      peg$c887 = peg$literalExpectation(\"CASE\", true),\n      peg$c888 = \"when\",\n      peg$c889 = peg$literalExpectation(\"WHEN\", true),\n      peg$c890 = \"then\",\n      peg$c891 = peg$literalExpectation(\"THEN\", true),\n      peg$c892 = \"else\",\n      peg$c893 = peg$literalExpectation(\"ELSE\", true),\n      peg$c894 = \"end\",\n      peg$c895 = peg$literalExpectation(\"END\", true),\n      peg$c896 = \"cast\",\n      peg$c897 = peg$literalExpectation(\"CAST\", true),\n      peg$c898 = \"bool\",\n      peg$c899 = peg$literalExpectation(\"BOOL\", true),\n      peg$c900 = function() { return 'BOOL'; },\n      peg$c901 = \"boolean\",\n      peg$c902 = peg$literalExpectation(\"BOOLEAN\", true),\n      peg$c903 = function() { return 'BOOLEAN'; },\n      peg$c904 = \"char\",\n      peg$c905 = peg$literalExpectation(\"CHAR\", true),\n      peg$c906 = function() { return 'CHAR'; },\n      peg$c907 = \"varchar\",\n      peg$c908 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c909 = function() { return 'VARCHAR';},\n      peg$c910 = \"numeric\",\n      peg$c911 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c912 = function() { return 'NUMERIC'; },\n      peg$c913 = \"decimal\",\n      peg$c914 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c915 = function() { return 'DECIMAL'; },\n      peg$c916 = \"signed\",\n      peg$c917 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c918 = function() { return 'SIGNED'; },\n      peg$c919 = \"unsigned\",\n      peg$c920 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c921 = function() { return 'UNSIGNED'; },\n      peg$c922 = \"int\",\n      peg$c923 = peg$literalExpectation(\"INT\", true),\n      peg$c924 = function() { return 'INT'; },\n      peg$c925 = \"zerofill\",\n      peg$c926 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c927 = function() { return 'ZEROFILL'; },\n      peg$c928 = \"integer\",\n      peg$c929 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c930 = function() { return 'INTEGER'; },\n      peg$c931 = \"json\",\n      peg$c932 = peg$literalExpectation(\"JSON\", true),\n      peg$c933 = function() { return 'JSON'; },\n      peg$c934 = \"jsonb\",\n      peg$c935 = peg$literalExpectation(\"JSONB\", true),\n      peg$c936 = function() { return 'JSONB'; },\n      peg$c937 = \"geometry\",\n      peg$c938 = peg$literalExpectation(\"GEOMETRY\", true),\n      peg$c939 = function() { return 'GEOMETRY'; },\n      peg$c940 = \"smallint\",\n      peg$c941 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c942 = function() { return 'SMALLINT'; },\n      peg$c943 = \"serial\",\n      peg$c944 = peg$literalExpectation(\"SERIAL\", true),\n      peg$c945 = function() { return 'SERIAL'; },\n      peg$c946 = \"tinyint\",\n      peg$c947 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c948 = function() { return 'TINYINT'; },\n      peg$c949 = \"tinytext\",\n      peg$c950 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c951 = function() { return 'TINYTEXT'; },\n      peg$c952 = \"text\",\n      peg$c953 = peg$literalExpectation(\"TEXT\", true),\n      peg$c954 = function() { return 'TEXT'; },\n      peg$c955 = \"mediumtext\",\n      peg$c956 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c957 = function() { return 'MEDIUMTEXT'; },\n      peg$c958 = \"longtext\",\n      peg$c959 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c960 = function() { return 'LONGTEXT'; },\n      peg$c961 = \"bigint\",\n      peg$c962 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c963 = function() { return 'BIGINT'; },\n      peg$c964 = \"enum\",\n      peg$c965 = peg$literalExpectation(\"ENUM\", true),\n      peg$c966 = function() { return 'ENUM'; },\n      peg$c967 = \"float\",\n      peg$c968 = peg$literalExpectation(\"FLOAT\", true),\n      peg$c969 = function() { return 'FLOAT'; },\n      peg$c970 = \"double\",\n      peg$c971 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c972 = function() { return 'DOUBLE'; },\n      peg$c973 = function() { return 'DATE'; },\n      peg$c974 = \"datetime\",\n      peg$c975 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c976 = function() { return 'DATETIME'; },\n      peg$c977 = \"rows\",\n      peg$c978 = peg$literalExpectation(\"ROWS\", true),\n      peg$c979 = function() { return 'ROWS'; },\n      peg$c980 = \"time\",\n      peg$c981 = peg$literalExpectation(\"TIME\", true),\n      peg$c982 = function() { return 'TIME'; },\n      peg$c983 = \"timestamp\",\n      peg$c984 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c985 = function() { return 'TIMESTAMP'; },\n      peg$c986 = \"truncate\",\n      peg$c987 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c988 = function() { return 'TRUNCATE'; },\n      peg$c989 = \"user\",\n      peg$c990 = peg$literalExpectation(\"USER\", true),\n      peg$c991 = function() { return 'USER'; },\n      peg$c992 = \"uuid\",\n      peg$c993 = peg$literalExpectation(\"UUID\", true),\n      peg$c994 = function() { return 'UUID'; },\n      peg$c995 = \"current_date\",\n      peg$c996 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c997 = function() { return 'CURRENT_DATE'; },\n      peg$c998 = \"adddate\",\n      peg$c999 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c1000 = function() { return 'ADDDATE'; },\n      peg$c1001 = \"interval\",\n      peg$c1002 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c1003 = function() { return 'INTERVAL'; },\n      peg$c1004 = function() { return 'YEAR'; },\n      peg$c1005 = function() { return 'MONTH'; },\n      peg$c1006 = function() { return 'DAY'; },\n      peg$c1007 = function() { return 'HOUR'; },\n      peg$c1008 = function() { return 'MINUTE'; },\n      peg$c1009 = function() { return 'SECOND'; },\n      peg$c1010 = \"current_time\",\n      peg$c1011 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c1012 = function() { return 'CURRENT_TIME'; },\n      peg$c1013 = \"current_timestamp\",\n      peg$c1014 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c1015 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c1016 = \"current_user\",\n      peg$c1017 = peg$literalExpectation(\"CURRENT_USER\", true),\n      peg$c1018 = function() { return 'CURRENT_USER'; },\n      peg$c1019 = \"session_user\",\n      peg$c1020 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c1021 = function() { return 'SESSION_USER'; },\n      peg$c1022 = \"system_user\",\n      peg$c1023 = peg$literalExpectation(\"SYSTEM_USER\", true),\n      peg$c1024 = function() { return 'SYSTEM_USER'; },\n      peg$c1025 = \"global\",\n      peg$c1026 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c1027 = function() { return 'GLOBAL'; },\n      peg$c1028 = \"session\",\n      peg$c1029 = peg$literalExpectation(\"SESSION\", true),\n      peg$c1030 = function() { return 'SESSION'; },\n      peg$c1031 = \"local\",\n      peg$c1032 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c1033 = function() { return 'LOCAL'; },\n      peg$c1034 = \"persist\",\n      peg$c1035 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c1036 = function() { return 'PERSIST'; },\n      peg$c1037 = \"persist_only\",\n      peg$c1038 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c1039 = function() { return 'PERSIST_ONLY'; },\n      peg$c1040 = \"@\",\n      peg$c1041 = peg$literalExpectation(\"@\", false),\n      peg$c1042 = \"@@\",\n      peg$c1043 = peg$literalExpectation(\"@@\", false),\n      peg$c1044 = \"$$\",\n      peg$c1045 = peg$literalExpectation(\"$$\", false),\n      peg$c1046 = \"return\",\n      peg$c1047 = peg$literalExpectation(\"return\", true),\n      peg$c1048 = \":=\",\n      peg$c1049 = peg$literalExpectation(\":=\", false),\n      peg$c1050 = \"::\",\n      peg$c1051 = peg$literalExpectation(\"::\", false),\n      peg$c1052 = \"dual\",\n      peg$c1053 = peg$literalExpectation(\"DUAL\", true),\n      peg$c1054 = \"add\",\n      peg$c1055 = peg$literalExpectation(\"ADD\", true),\n      peg$c1056 = function() { return 'ADD'; },\n      peg$c1057 = \"column\",\n      peg$c1058 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c1059 = function() { return 'COLUMN'; },\n      peg$c1060 = \"index\",\n      peg$c1061 = peg$literalExpectation(\"INDEX\", true),\n      peg$c1062 = function() { return 'INDEX'; },\n      peg$c1063 = function() { return 'KEY'; },\n      peg$c1064 = \"fulltext\",\n      peg$c1065 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c1066 = function() { return 'FULLTEXT'; },\n      peg$c1067 = \"spatial\",\n      peg$c1068 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c1069 = function() { return 'SPATIAL'; },\n      peg$c1070 = function() { return 'UNIQUE'; },\n      peg$c1071 = function() { return 'KEY_BLOCK_SIZE'; },\n      peg$c1072 = \"comment\",\n      peg$c1073 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c1074 = function() { return 'COMMENT'; },\n      peg$c1075 = \"constraint\",\n      peg$c1076 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c1077 = function() { return 'CONSTRAINT'; },\n      peg$c1078 = \"concurrently\",\n      peg$c1079 = peg$literalExpectation(\"CONCURRENTLY\", true),\n      peg$c1080 = function() { return 'CONCURRENTLY'; },\n      peg$c1081 = \"references\",\n      peg$c1082 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c1083 = function() { return 'REFERENCES'; },\n      peg$c1084 = \"sql_calc_found_rows\",\n      peg$c1085 = peg$literalExpectation(\"SQL_CALC_FOUND_ROWS\", true),\n      peg$c1086 = \"sql_cache\",\n      peg$c1087 = peg$literalExpectation(\"SQL_CACHE\", true),\n      peg$c1088 = \"sql_no_cache\",\n      peg$c1089 = peg$literalExpectation(\"SQL_NO_CACHE\", true),\n      peg$c1090 = \"sql_small_result\",\n      peg$c1091 = peg$literalExpectation(\"SQL_SMALL_RESULT\", true),\n      peg$c1092 = \"sql_big_result\",\n      peg$c1093 = peg$literalExpectation(\"SQL_BIG_RESULT\", true),\n      peg$c1094 = \"sql_buffer_result\",\n      peg$c1095 = peg$literalExpectation(\"SQL_BUFFER_RESULT\", true),\n      peg$c1096 = \",\",\n      peg$c1097 = peg$literalExpectation(\",\", false),\n      peg$c1098 = \"[\",\n      peg$c1099 = peg$literalExpectation(\"[\", false),\n      peg$c1100 = \"]\",\n      peg$c1101 = peg$literalExpectation(\"]\", false),\n      peg$c1102 = \"->\",\n      peg$c1103 = peg$literalExpectation(\"->\", false),\n      peg$c1104 = \"->>\",\n      peg$c1105 = peg$literalExpectation(\"->>\", false),\n      peg$c1106 = \"#>\",\n      peg$c1107 = peg$literalExpectation(\"#>\", false),\n      peg$c1108 = \"#>>\",\n      peg$c1109 = peg$literalExpectation(\"#>>\", false),\n      peg$c1110 = \"||\",\n      peg$c1111 = peg$literalExpectation(\"||\", false),\n      peg$c1112 = \"&&\",\n      peg$c1113 = peg$literalExpectation(\"&&\", false),\n      peg$c1114 = \"/*\",\n      peg$c1115 = peg$literalExpectation(\"/*\", false),\n      peg$c1116 = \"*/\",\n      peg$c1117 = peg$literalExpectation(\"*/\", false),\n      peg$c1118 = \"--\",\n      peg$c1119 = peg$literalExpectation(\"--\", false),\n      peg$c1120 = \"#\",\n      peg$c1121 = peg$literalExpectation(\"#\", false),\n      peg$c1122 = function(k, s, c) {\n          // => { type: 'comment'; keyword: 'comment'; symbol: '='; value: literal_string; }\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c1123 = peg$anyExpectation(),\n      peg$c1124 = /^[ \\t\\n\\r]/,\n      peg$c1125 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c1126 = function() { varList = []; return true; },\n      peg$c1127 = function(s) {\n            // => { type: 'proc'; stmt: assign_stmt | return_stmt; vars: any }\n            return { type: 'proc', stmt: s, vars: varList };\n          },\n      peg$c1128 = function(va, s, e) {\n          // => { type: 'assign'; left: var_decl | without_prefix_var_decl; symbol: ':=' | '='; right: proc_expr; }\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c1129 = function(e) {\n          // => { type: 'return'; expr: proc_expr; }\n            return { type: 'return', expr: e };\n          },\n      peg$c1130 = function(lt, op, rt, expr) {\n          // => { type: 'join'; ltable: var_decl; rtable: var_decl; op: join_op; expr: on_clause; }\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c1131 = function(e) {\n          // => proc_additive_expr & { parentheses: true; }\n            e.parentheses = true;\n            return e;\n          },\n      peg$c1132 = function(dt, tail) {\n          // => string\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c1133 = function(name, l) {\n          // => { type: 'function'; name: string; args: null | { type: expr_list; value: proc_primary_list; }}\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c1134 = function(name) {\n          // => IGNORE\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c1135 = function(head, tail) {\n          // => proc_primary[]\n            return createList(head, tail);\n          },\n      peg$c1136 = function(l) {\n          // => { type: 'array'; value: proc_primary_list }\n          return { type: 'array', value: l };\n        },\n      peg$c1137 = function(head, tail) {\n          // => var_decl[]\n          return createList(head, tail)\n        },\n      peg$c1138 = /^[^$]/,\n      peg$c1139 = peg$classExpectation([\"$\"], true, false),\n      peg$c1140 = function(p, d, s) {\n          // => { type: 'var'; name: string; prefix: string; suffix: string; };\n          return {\n            type: 'var',\n            name: d.join(''),\n            prefix: '$$',\n            suffix: '$$'\n          };\n        },\n      peg$c1141 = function(f, d, s) { if (f !== s) return true },\n      peg$c1142 = function(f, d, s) {\n          // => { type: 'var'; name: string; prefix: string; suffix: string; };\n          return {\n            type: 'var',\n            name: d.join(''),\n            prefix: `$${f}$`,\n            suffix: `$${s}$`\n          };\n        },\n      peg$c1143 = function(p, d) {\n          // => without_prefix_var_decl & { type: 'var'; prefix: string; };\n          // push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c1144 = function(name, m) {\n          // => { type: 'var'; prefix: string; name: ident_name; members: mem_chain; }\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c1145 = function(l) {\n          // => ident_name[];\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c1146 = function(t) {\n          /* => data_type */\n          return { ...t, array: 'two' }\n        },\n      peg$c1147 = function(t) {\n          /* => data_type */\n          return { ...t, array: 'one' }\n        },\n      peg$c1148 = function(t) { /* => data_type */ return { dataType: t }},\n      peg$c1149 = \"bytea\",\n      peg$c1150 = peg$literalExpectation(\"bytea\", true),\n      peg$c1151 = function() { /* => data_type */ return { dataType: 'BYTEA' }; },\n      peg$c1152 = function(t, l) {\n          // => data_type\n          return { dataType: t, length: parseInt(l.join(''), 10) };\n        },\n      peg$c1153 = function(t) { /* =>  data_type */ return { dataType: t }; },\n      peg$c1154 = function(t) { /* =>  data_type */  return { dataType: t }; },\n      peg$c1155 = function(un, ze) {\n          // => any[];\n          const result = []\n          if (un) result.push(un)\n          if (ze) result.push(ze)\n          return result\n        },\n      peg$c1156 = function(t, l, r, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s }; },\n      peg$c1157 = function(t, l, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), suffix: s }; },\n      peg$c1158 = function(t, s) { /* =>  data_type */ return { dataType: t, suffix: s }; },\n      peg$c1159 = \"without\",\n      peg$c1160 = peg$literalExpectation(\"WITHOUT\", true),\n      peg$c1161 = \"zone\",\n      peg$c1162 = peg$literalExpectation(\"ZONE\", true),\n      peg$c1163 = function(w) {\n          // => string[];\n          return [w.toUpperCase(), 'TIME', 'ZONE']\n        },\n      peg$c1164 = function(t, l, tz) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true, suffix: tz }; },\n      peg$c1165 = function(t, tz) { /* =>  data_type */  return { dataType: t, suffix: tz }; },\n      peg$c1166 = function(t, l) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c1167 = function(t, e) {\n          /* =>  data_type */\n          e.parentheses = true\n          return {\n            dataType: t,\n            expr: e\n          }\n        },\n      peg$c1168 = function(t) {/* =>  data_type */  return { dataType: t }; },\n      peg$c1169 = function(t) { /* =>  data_type */ return { dataType: `${t}[]` }},\n      peg$c1170 = function(t) { /* =>  data_type */ return { dataType: t }},\n      peg$c1171 = function(t) {/* =>  data_type */  return { dataType: t }},\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecmd_stmt();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecrud_stmt();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parsedrop_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetruncate_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserename_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecall_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuse_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealter_table_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseset_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parselock_stmt();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseshow_stmt();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parsedeallocate_stmt();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_trigger();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_extension_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_index_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecreate_sequence();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecreate_db_stmt();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedelete_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecmd_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseproc_stmts();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecrud_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecrud_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecrud_stmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_UNION();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseKW_ALL();\n            if (s7 === peg$FAILED) {\n              s7 = null;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseselect_stmt();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_UNION();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseKW_ALL();\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseselect_stmt();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c2(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_not_exists_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c3) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_EXISTS();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c5();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_extension_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c6) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c7); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseliteral_string();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_WITH();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c8) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parseident_name();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = peg$parseliteral_string();\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$currPos;\n                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c10) {\n                              s14 = input.substr(peg$currPos, 7);\n                              peg$currPos += 7;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c11); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parse__();\n                              if (s15 !== peg$FAILED) {\n                                s16 = peg$parseident_name();\n                                if (s16 === peg$FAILED) {\n                                  s16 = peg$parseliteral_string();\n                                }\n                                if (s16 !== peg$FAILED) {\n                                  s14 = [s14, s15, s16];\n                                  s13 = s14;\n                                } else {\n                                  peg$currPos = s13;\n                                  s13 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s13;\n                                s13 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s13;\n                              s13 = peg$FAILED;\n                            }\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$currPos;\n                                s16 = peg$parseKW_FROM();\n                                if (s16 !== peg$FAILED) {\n                                  s17 = peg$parse__();\n                                  if (s17 !== peg$FAILED) {\n                                    s18 = peg$parseident_name();\n                                    if (s18 === peg$FAILED) {\n                                      s18 = peg$parseliteral_string();\n                                    }\n                                    if (s18 !== peg$FAILED) {\n                                      s16 = [s16, s17, s18];\n                                      s15 = s16;\n                                    } else {\n                                      peg$currPos = s15;\n                                      s15 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c12(s1, s3, s5, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEME();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c14(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseKW_IGNORE();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parseKW_REPLACE();\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_AS();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseunion_stmt();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c15(s1, s3, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseif_not_exists_stmt();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c16(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_TEMP();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SEQUENCE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        s12 = peg$parseKW_AS();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsealias_ident();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsecreate_sequence_definition_list();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c17(s1, s3, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_increment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c18) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c20(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_minval() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c21) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c21) {\n            s3 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c22); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c26();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_maxval() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c27) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c27) {\n            s3 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_start() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c30) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_WITH();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c32(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_cache() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c33) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_cycle() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c35) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c37(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_owned() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c38) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c39); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c40) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c41); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c42();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c38) {\n        s1 = input.substr(peg$currPos, 5);\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BY();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c43(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence_definition() {\n    var s0;\n\n    s0 = peg$parsesequence_definition_increment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesequence_definition_minval();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesequence_definition_maxval();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsesequence_definition_start();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsesequence_definition_cache();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsesequence_definition_cycle();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsesequence_definition_owned();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence_definition_list() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_sequence_definition();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_sequence_definition();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_sequence_definition();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c44(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_CONCURRENTLY();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_ON();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_name();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseindex_type();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseLPAREN();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsecolumn_order_list();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseRPAREN();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$currPos;\n                                                s24 = peg$parseKW_WITH();\n                                                if (s24 !== peg$FAILED) {\n                                                  s25 = peg$parse__();\n                                                  if (s25 !== peg$FAILED) {\n                                                    s26 = peg$parseLPAREN();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseindex_options_list();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseRPAREN();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s24 = [s24, s25, s26, s27, s28, s29, s30];\n                                                              s23 = s24;\n                                                            } else {\n                                                              peg$currPos = s23;\n                                                              s23 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s23;\n                                                            s23 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s23;\n                                                          s23 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s23;\n                                                        s23 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s23;\n                                                      s23 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s23;\n                                                    s23 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s23;\n                                                  s23 = peg$FAILED;\n                                                }\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$currPos;\n                                                    s26 = peg$parseKW_TABLESPACE();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseident_name();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s26 = [s26, s27, s28];\n                                                          s25 = s26;\n                                                        } else {\n                                                          peg$currPos = s25;\n                                                          s25 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s25;\n                                                        s25 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s25;\n                                                      s25 = peg$FAILED;\n                                                    }\n                                                    if (s25 === peg$FAILED) {\n                                                      s25 = null;\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parsewhere_clause();\n                                                        if (s27 === peg$FAILED) {\n                                                          s27 = null;\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c45(s1, s3, s5, s7, s9, s11, s13, s15, s19, s23, s25, s27);\n                                                            s0 = s1;\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_order();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_order();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_order();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecollate_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_ASC();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseKW_DESC();\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c47) {\n                      s10 = input.substr(peg$currPos, 5);\n                      peg$currPos += 5;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c48); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c49) {\n                          s12 = input.substr(peg$currPos, 5);\n                          peg$currPos += 5;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c50); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c51) {\n                            s12 = input.substr(peg$currPos, 4);\n                            peg$currPos += 4;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c52); }\n                          }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c53(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c54(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c55(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_definition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecolumn_constraint();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c57) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c58); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c59(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c60) {\n          s2 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c61); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {\n              s4 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c63); }\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c64) {\n            s2 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {\n                s4 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c63); }\n              }\n              if (s4 !== peg$FAILED) {\n                s2 = [s2, s3, s4];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c66(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsekeyword_comment();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c67(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsecollate_expr();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c68(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsecolumn_format();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c69(s1);\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsestorage();\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c70(s1);\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsereference_definition();\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c71(s1);\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parsecreate_option_character_set_kw();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseKW_ASSIGIN_EQUAL();\n                        if (s3 === peg$FAILED) {\n                          s3 = null;\n                        }\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseident_name();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c72(s1, s3, s5);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt_list() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_definition_opt();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecolumn_definition_opt();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecolumn_definition_opt();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c73(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_definition_opt_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c74(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_constraint() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_not_null();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseliteral_null();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedefault_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c75(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedefault_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_not_null();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_null();\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c76(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c77(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c78) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c79); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c80) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c81); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c82) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c83); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c84) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c85); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c86(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c87) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c88); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c89) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c91) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c92); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c93(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c94(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c95(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c96(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c97(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c98(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c99(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c100(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c101(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_ADD_INDEX_OR_KEY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseALTER_RENAME_TABLE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseALTER_ALGORITHM();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseALTER_LOCK();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c102(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c103(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_INDEX_OR_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c104(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c105(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c106) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c107); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c84) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c85); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c108) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c109); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c110) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c111); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c112) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c113); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c114(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c115) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c116); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c84) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c85); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c40) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c41); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c117) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c118); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c119) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c120); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c121(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c122(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c123(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c124(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c125) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c126); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c127(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c128(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c129) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c131(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c132) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c133); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c134) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c136) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c137); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c138(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c139) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c140); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c141) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c142); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsereference_option();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c143(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c144) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c146) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c148) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c149); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c150) {\n            s1 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c151); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c152) {\n              s1 = input.substr(peg$currPos, 11);\n              peg$currPos += 11;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c153); }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c154(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_trigger() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c155) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c156); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c157) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c158); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c159) {\n                        s9 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c160); }\n                      }\n                      if (s9 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c161) {\n                          s9 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s9 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c162); }\n                        }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsetrigger_event_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c163) {\n                              s13 = input.substr(peg$currPos, 2);\n                              peg$currPos += 2;\n                            } else {\n                              s13 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c164); }\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_name();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$currPos;\n                                    s18 = peg$parseKW_FROM();\n                                    if (s18 !== peg$FAILED) {\n                                      s19 = peg$parse__();\n                                      if (s19 !== peg$FAILED) {\n                                        s20 = peg$parsetable_name();\n                                        if (s20 !== peg$FAILED) {\n                                          s18 = [s18, s19, s20];\n                                          s17 = s18;\n                                        } else {\n                                          peg$currPos = s17;\n                                          s17 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s17;\n                                        s17 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s17;\n                                      s17 = peg$FAILED;\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsetrigger_deferrable();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsetrigger_for_row();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parsetrigger_when();\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c165) {\n                                                      s25 = input.substr(peg$currPos, 7);\n                                                      peg$currPos += 7;\n                                                    } else {\n                                                      s25 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c166); }\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c167) {\n                                                          s27 = input.substr(peg$currPos, 9);\n                                                          peg$currPos += 9;\n                                                        } else {\n                                                          s27 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c168); }\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            s29 = peg$parseproc_func_call();\n                                                            if (s29 !== peg$FAILED) {\n                                                              peg$savedPos = s0;\n                                                              s1 = peg$c169(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s29);\n                                                              s0 = s1;\n                                                            } else {\n                                                              peg$currPos = s0;\n                                                              s0 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DELETE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TRUNCATE();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c170(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UPDATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c171) {\n            s4 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c172); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_ref_list();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c173(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrigger_event();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetrigger_event();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetrigger_event();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c174(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_deferrable() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c175) {\n      s2 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c176); }\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c177) {\n          s4 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c178); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 19).toLowerCase() === peg$c179) {\n          s3 = input.substr(peg$currPos, 19);\n          peg$currPos += 19;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c180); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 18).toLowerCase() === peg$c181) {\n            s3 = input.substr(peg$currPos, 18);\n            peg$currPos += 18;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c182); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c183(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_for_row() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c184) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c185); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c186) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c187); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c188) {\n              s5 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c189); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c190) {\n                s5 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c191); }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c192(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_when() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c193(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c194(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c195) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c196); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c198); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c199();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c200) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c201); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c202) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c203); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c204(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c57) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c58); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c205) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c206); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c207) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c208); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c209) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c210); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c211) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c212); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c213) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c214); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c215(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c216) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c217); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c218(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c219) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c220); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c221;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c223) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c224); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c225) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c226); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c40) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c221;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c227(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c228) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c229); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c230(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c231(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c232(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c233(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_mode() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c234) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c236) {\n          s3 = input.substr(peg$currPos, 12);\n          peg$currPos += 12;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c237); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c238) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c239); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c240) {\n              s3 = input.substr(peg$currPos, 13);\n              peg$currPos += 13;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c241); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 22).toLowerCase() === peg$c242) {\n                s3 = input.substr(peg$currPos, 22);\n                peg$currPos += 22;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c243); }\n              }\n              if (s3 === peg$FAILED) {\n                if (input.substr(peg$currPos, 19).toLowerCase() === peg$c244) {\n                  s3 = input.substr(peg$currPos, 19);\n                  peg$currPos += 19;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c245); }\n                }\n                if (s3 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c119) {\n                    s3 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c120); }\n                  }\n                  if (s3 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c246) {\n                      s3 = input.substr(peg$currPos, 16);\n                      peg$currPos += 16;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n                    }\n                    if (s3 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c248) {\n                        s3 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c249); }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c250) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c251); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c252(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselock_mode();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c253) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c254); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c255(s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c256(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c257) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c258); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c259();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeallocate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEALLOCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c260) {\n          s3 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c261); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ALL();\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c262(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 59) {\n          s3 = peg$c263;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c264); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c265();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c266;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c267); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseselect_stmt();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s6 = peg$c268;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c269); }\n                }\n                if (s6 !== peg$FAILED) {\n                  s2 = [s2, s3, s4, s5, s6];\n                  s1 = s2;\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c270(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c271(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseKW_WITH();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_RECURSIVE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecte_definition();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c272(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_column_definition();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecrud_stmt();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c273(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c274(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedistinct_on() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DISTINCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ON();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_ref_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c275(s1, s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c276(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseoption_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsedistinct_on();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseinto_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefrom_clause();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parseinto_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsewhere_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsegroup_by_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parsehaving_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parseorder_by_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parselimit_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parse__();\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parsewindow_clause();\n                                                          if (s28 === peg$FAILED) {\n                                                            s28 = null;\n                                                          }\n                                                          if (s28 !== peg$FAILED) {\n                                                            s29 = peg$parse__();\n                                                            if (s29 !== peg$FAILED) {\n                                                              s30 = peg$parseinto_clause();\n                                                              if (s30 === peg$FAILED) {\n                                                                s30 = null;\n                                                              }\n                                                              if (s30 !== peg$FAILED) {\n                                                                peg$savedPos = s0;\n                                                                s1 = peg$c277(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26, s28, s30);\n                                                                s0 = s1;\n                                                              } else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                              }\n                                                            } else {\n                                                              peg$currPos = s0;\n                                                              s0 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoption_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsequery_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsequery_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c278(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOPT_SQL_CACHE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_NO_CACHE();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_BIG_RESULT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOPT_SQL_SMALL_RESULT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOPT_SQL_BUFFER_RESULT();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c279(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseident_start();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseSTAR();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c280(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c281(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_index() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c282(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_item() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebinary_column_expr();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseexpr();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsearray_index();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c283(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestring_constants_escape();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c284(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseexpr_item();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DOUBLE_COLON();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsedata_type();\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseadditive_operator();\n                  if (s9 === peg$FAILED) {\n                    s9 = peg$parsemultiplicative_operator();\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseexpr_item();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$currPos;\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseadditive_operator();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parsemultiplicative_operator();\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr_item();\n                        if (s11 !== peg$FAILED) {\n                          s8 = [s8, s9, s10, s11];\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsealias_clause();\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c285(s1, s3, s5, s6, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseident();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseSTAR();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c286(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseexpr_item();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parsealias_clause();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c287(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_alias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c288(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c288(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c289(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinto_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTO();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevar_decl_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c290(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_INTO();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c291) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c292); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c293) {\n              s3 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c294); }\n            }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_string();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseident();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c295(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c296(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c297(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c298(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c299) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c300); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c301) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c302); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c303) {\n              s3 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c304); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c305) {\n                s3 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c306); }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c307(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseindex_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseindex_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c308(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c309(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c310(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseident();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c311(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseindex_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c312) {\n            s1 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c313); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c314) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c315); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseident_name();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c316(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c317) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c318); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c319) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c320); }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c321(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsekeyword_comment();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c322(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c323(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c324(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c325(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c326(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c327(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DUAL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c328();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsevalue_clause();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_alias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c329(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c330) {\n          s1 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c331); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parsevalue_clause();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsevalue_alias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c332(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c330) {\n            s1 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c331); }\n          }\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parsefunc_call();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parsealias_clause();\n                  if (s5 === peg$FAILED) {\n                    s5 = null;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c333(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsetable_name();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 11).toLowerCase() === peg$c334) {\n                  s3 = input.substr(peg$currPos, 11);\n                  peg$currPos += 11;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c335); }\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsefunc_call();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$currPos;\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c336) {\n                          s8 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s8 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c337); }\n                        }\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parse__();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parseLPAREN();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parse__();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parseliteral_numeric();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parse__();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parseRPAREN();\n                                    if (s14 !== peg$FAILED) {\n                                      s8 = [s8, s9, s10, s11, s12, s13, s14];\n                                      s7 = s8;\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s7;\n                                s7 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s7;\n                            s7 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                        if (s7 === peg$FAILED) {\n                          s7 = null;\n                        }\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parsealias_clause();\n                            if (s9 === peg$FAILED) {\n                              s9 = null;\n                            }\n                            if (s9 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c338(s1, s5, s7, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsetable_name();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parsealias_clause();\n                  if (s3 === peg$FAILED) {\n                    s3 = null;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c339(s1, s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c340();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c341();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c342();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c343) {\n            s1 = input.substr(peg$currPos, 5);\n            peg$currPos += 5;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c344); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c345();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            s2 = peg$parseKW_INNER();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parse__();\n              if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parseKW_JOIN();\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c346();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_without_kw();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_without_kw();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident_without_kw();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c347(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_without_kw();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseSTAR();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c348(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident_without_kw();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident_without_kw();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c349(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsevar_decl();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c350(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c351(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c352(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c353(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_ref();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_ref();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c354(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c355(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c356(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c357(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c358(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseident_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c359(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewindow_frame_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c360(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification_frameless() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c361(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ROWS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewindow_frame_following();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsewindow_frame_preceding();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c362(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewindow_frame_preceding();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AND();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsewindow_frame_following();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c363(s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c364) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c365); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c366(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c367) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c368); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c369(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c188) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c189); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c372();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c375(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c376(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c377(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c378(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c47) {\n              s6 = input.substr(peg$currPos, 5);\n              peg$currPos += 5;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c49) {\n                  s8 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c50); }\n                }\n                if (s8 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c51) {\n                    s8 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c52); }\n                  }\n                }\n                if (s8 === peg$FAILED) {\n                  s8 = null;\n                }\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c379(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_LIMIT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsenumber_or_param();\n        if (s4 === peg$FAILED) {\n          s4 = peg$parseKW_ALL();\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parseKW_OFFSET();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsenumber_or_param();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c380(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhere_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsereturning_stmt();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c381(s3, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c382(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c383(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c384;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c385); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c386(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c384;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c385); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c387(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconflict_stmt() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c388) {\n          s3 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c389); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturning_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURNING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecolumn_ref_list();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c390(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c391(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c392(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsereturning_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c393(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsereturning_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c394(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c395();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c396();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c397(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c398(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c399(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c400(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c401(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_INTERVAL();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c402(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c403(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c404(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c405(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c406(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parselogic_operator_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseor_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunion_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c407(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c408(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebinary_column_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_OR();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseLOGIC_OPERATOR();\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c409(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c410(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c411(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c411(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c412;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c413); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c384;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c385); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c414(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c415(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c416(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c417(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsejsonb_op_right();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c418(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c419) {\n      s0 = peg$c419;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c420); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c421;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c422); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c423) {\n          s0 = peg$c423;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c424); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c425) {\n            s0 = peg$c425;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c426); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c427;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c428); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c384;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c385); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c429) {\n                  s0 = peg$c429;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c430); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c431(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_IS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseKW_DISTINCT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseKW_FROM();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetable_name();\n                  if (s8 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c432(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseKW_IS();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_NOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseadditive_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c433(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c434(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c435(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 === peg$FAILED) {\n          s4 = peg$parseKW_ILIKE();\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c436(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_ILIKE();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c437) {\n            s1 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c438); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_TO();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c439();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_NOT();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c437) {\n                  s3 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c438); }\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseKW_TO();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c440();\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c441) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_string();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c443(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c444(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseescape_op();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c445(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c446(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevar_decl();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_string();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c447(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejsonb_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c448) {\n      s1 = peg$c448;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c450) {\n        s1 = peg$c450;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c451); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPERATOR_CONCATENATION();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseDOUBLE_WELL_ARROW();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWELL_ARROW();\n            if (s1 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 63) {\n                s1 = peg$c452;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c453); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c454) {\n                  s1 = peg$c454;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c455); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c456) {\n                    s1 = peg$c456;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c457); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c458) {\n                      s1 = peg$c458;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_list_item();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c460(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c411(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c461;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c463;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c464); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c465(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c466;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c468;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c469); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c470;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c471); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewindow_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsefunc_call();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecase_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseinterval_expr();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsecolumn_ref();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse__();\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parsearray_index();\n                      if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c472(s1, s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsecolumn_ref();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseparam();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseLPAREN();\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$parse__();\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseor_and_where_expr();\n                            if (s3 !== peg$FAILED) {\n                              s4 = peg$parse__();\n                              if (s4 !== peg$FAILED) {\n                                s5 = peg$parseRPAREN();\n                                if (s5 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c473(s3);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsevar_decl();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            s1 = peg$parse__();\n                            if (s1 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 36) {\n                                s2 = peg$c474;\n                                peg$currPos++;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c475); }\n                              }\n                              if (s2 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 60) {\n                                  s3 = peg$c427;\n                                  peg$currPos++;\n                                } else {\n                                  s3 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c428); }\n                                }\n                                if (s3 !== peg$FAILED) {\n                                  s4 = peg$parseliteral_numeric();\n                                  if (s4 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 62) {\n                                      s5 = peg$c421;\n                                      peg$currPos++;\n                                    } else {\n                                      s5 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c422); }\n                                    }\n                                    if (s5 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c476(s2, s4);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              s1 = peg$parse__();\n                              if (s1 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 36) {\n                                  s2 = peg$c474;\n                                  peg$currPos++;\n                                } else {\n                                  s2 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c475); }\n                                }\n                                if (s2 !== peg$FAILED) {\n                                  s3 = peg$parseliteral_numeric();\n                                  if (s3 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c477(s2, s3);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestring_constants_escape() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c478) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c479); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s2 = peg$c221;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsesingle_char();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsesingle_char();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s6 = peg$c221;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c222); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c480(s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parsestring_constants_escape();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseSTAR();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c481(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseident();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsecolumn();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = [];\n                s6 = peg$currPos;\n                s7 = peg$parseDOUBLE_ARROW();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseSINGLE_ARROW();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_string();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseliteral_numeric();\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s7 = [s7, s8, s9];\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                if (s6 !== peg$FAILED) {\n                  while (s6 !== peg$FAILED) {\n                    s5.push(s6);\n                    s6 = peg$currPos;\n                    s7 = peg$parseDOUBLE_ARROW();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseSINGLE_ARROW();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseliteral_string();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseliteral_numeric();\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s7 = [s7, s8, s9];\n                          s6 = s7;\n                        } else {\n                          peg$currPos = s6;\n                          s6 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  }\n                } else {\n                  s5 = peg$FAILED;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c482(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseident();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseDOT();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse__();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parseident();\n                  if (s6 !== peg$FAILED) {\n                    s3 = [s3, s4, s5, s6];\n                    s2 = s3;\n                  } else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$currPos;\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseDOT();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsecolumn();\n                    if (s7 !== peg$FAILED) {\n                      s4 = [s4, s5, s6, s7];\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c483(s1, s2, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseident();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseDOT();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsecolumn();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c484(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsecolumn();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c485(s1);\n              }\n              s0 = s1;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c486(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c487(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c489(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c490(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseLPAREN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_list();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c491(s1, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$c492(s1);\n        if (s2) {\n          s2 = peg$FAILED;\n        } else {\n          s2 = void 0;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c493(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsequoted_ident();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c494(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c495;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c497.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c498); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c497.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c498); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c495;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c496); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c499(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c221;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c500.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c501); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c500.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c501); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c221;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c222); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c499(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c502;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c503); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c504.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c505); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c504.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c505); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c502;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c503); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c499(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_without_kw() {\n    var s0;\n\n    s0 = peg$parseident_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c487(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c506(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c507(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c508(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c509.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c510); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c511.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c512); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c513.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c514); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c515;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c516); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c517(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UPDATE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c518(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c519(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c520) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c521); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c522(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c520) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c521); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c523(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_filter() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c524) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c525); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhere_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c526(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggr_fun_count();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseaggr_fun_smma();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseaggr_array_agg();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseaggr_filter();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c527(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_func() {\n    var s0;\n\n    s0 = peg$parsewindow_fun_rank();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_fun_laglead();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsewindow_fun_firstlast();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_rank() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WIN_FNS_RANK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseover_partition();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c528(s1, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_laglead() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LAG_LEAD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseconsider_nulls_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseover_partition();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c529(s1, s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_firstlast() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FIRST_LAST_VALUE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseconsider_nulls_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseover_partition();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c530(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FIRST_LAST_VALUE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c531) {\n      s0 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c532); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c533) {\n        s0 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c534); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WIN_FNS_RANK() {\n    var s0;\n\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c535) {\n      s0 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c536); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c537) {\n        s0 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c538); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c539) {\n          s0 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c540); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LAG_LEAD() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c541) {\n      s0 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c542); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c543) {\n        s0 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c544); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c545) {\n          s0 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c546); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconsider_nulls_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c547) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c548); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c549) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c550); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c47) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c48); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c551(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c552(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_GROUP_CONCAT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c553(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 15).toLowerCase() === peg$c554) {\n        s1 = input.substr(peg$currPos, 15);\n        peg$currPos += 15;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c555); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c556) {\n          s1 = input.substr(peg$currPos, 15);\n          peg$currPos += 15;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c557); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseliteral_array();\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c558) {\n                        s9 = input.substr(peg$currPos, 6);\n                        peg$currPos += 6;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c559); }\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_GROUP();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseLPAREN();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseorder_by_clause();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        s18 = peg$parse__();\n                                        if (s18 !== peg$FAILED) {\n                                          s19 = peg$parseover_partition();\n                                          if (s19 === peg$FAILED) {\n                                            s19 = null;\n                                          }\n                                          if (s19 !== peg$FAILED) {\n                                            peg$savedPos = s0;\n                                            s1 = peg$c560(s1, s5, s15, s19);\n                                            s0 = s1;\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c250) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c561); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c558) {\n                      s7 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c559); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_GROUP();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseorder_by_clause();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseRPAREN();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseover_partition();\n                                        if (s17 === peg$FAILED) {\n                                          s17 = null;\n                                        }\n                                        if (s17 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c562(s1, s13, s17);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconcat_separator() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c563) {\n      s1 = peg$c563;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c564); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_string();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c565(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedistinct_args() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DISTINCT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c566(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseorder_by_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseconcat_separator();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c567(s1, s5, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c568(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedistinct_args();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_array_agg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ARRAY_AGG();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsedistinct_args();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseorder_by_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c569(s1, s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c466;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c570();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetrim_position() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c571) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c572); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c573) {\n        s0 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c574); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c575) {\n          s0 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c576); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_rem() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrim_position();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_string();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_FROM();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c577(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_func_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c578) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetrim_rem();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c580(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parsetrim_func_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c581(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c582(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseextract_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsescalar_time_func();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseon_update_current_timestamp();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c583(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c584) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c585); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c586) {\n        s1 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c587); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c588) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c589); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c590) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c591); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c592) {\n              s1 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c593); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c594) {\n                s1 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c595); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c596) {\n                  s1 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c597); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c598) {\n                    s1 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c599); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c600) {\n                      s1 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c602) {\n                        s1 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c604) {\n                          s1 = input.substr(peg$currPos, 12);\n                          peg$currPos += 12;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c605); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c606) {\n                            s1 = input.substr(peg$currPos, 10);\n                            peg$currPos += 10;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c608) {\n                              s1 = input.substr(peg$currPos, 12);\n                              peg$currPos += 12;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c609); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c610) {\n                                s1 = input.substr(peg$currPos, 6);\n                                peg$currPos += 6;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c611); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c612) {\n                                  s1 = input.substr(peg$currPos, 5);\n                                  peg$currPos += 5;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c613); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c614) {\n                                    s1 = input.substr(peg$currPos, 7);\n                                    peg$currPos += 7;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c615); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c616) {\n                                      s1 = input.substr(peg$currPos, 6);\n                                      peg$currPos += 6;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c617); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c618) {\n                                        s1 = input.substr(peg$currPos, 8);\n                                        peg$currPos += 8;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c619); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c620) {\n                                          s1 = input.substr(peg$currPos, 13);\n                                          peg$currPos += 13;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c621); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 15).toLowerCase() === peg$c622) {\n                                            s1 = input.substr(peg$currPos, 15);\n                                            peg$currPos += 15;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c623); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c624) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c625); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c626) {\n                                                s1 = input.substr(peg$currPos, 4);\n                                                peg$currPos += 4;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c627); }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c628(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c629(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_time_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parsescalar_time_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_USER();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_USER();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_SESSION_USER();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_SYSTEM_USER();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseaggr_func();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsewindow_func();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsefunc_call();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parsecase_expr();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseinterval_expr();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parsecolumn_ref();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseparam();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_DOUBLE_COLON();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c630(s3, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseliteral();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseaggr_func();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsewindow_func();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parsefunc_call();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parsecase_expr();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseinterval_expr();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parsecolumn_ref();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseparam();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DOUBLE_COLON();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsedata_type();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c631(s1, s3, s5, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsedata_type();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseRPAREN();\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c632(s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parseKW_DECIMAL();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseLPAREN();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseint();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parse__();\n                                    if (s14 !== peg$FAILED) {\n                                      s15 = peg$parseRPAREN();\n                                      if (s15 !== peg$FAILED) {\n                                        s16 = peg$parse__();\n                                        if (s16 !== peg$FAILED) {\n                                          s17 = peg$parseRPAREN();\n                                          if (s17 !== peg$FAILED) {\n                                            peg$savedPos = s0;\n                                            s1 = peg$c633(s5, s13);\n                                            s0 = s1;\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_CAST();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseLPAREN();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseexpr();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parseKW_AS();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parseKW_DECIMAL();\n                            if (s9 !== peg$FAILED) {\n                              s10 = peg$parse__();\n                              if (s10 !== peg$FAILED) {\n                                s11 = peg$parseLPAREN();\n                                if (s11 !== peg$FAILED) {\n                                  s12 = peg$parse__();\n                                  if (s12 !== peg$FAILED) {\n                                    s13 = peg$parseint();\n                                    if (s13 !== peg$FAILED) {\n                                      s14 = peg$parse__();\n                                      if (s14 !== peg$FAILED) {\n                                        s15 = peg$parseCOMMA();\n                                        if (s15 !== peg$FAILED) {\n                                          s16 = peg$parse__();\n                                          if (s16 !== peg$FAILED) {\n                                            s17 = peg$parseint();\n                                            if (s17 !== peg$FAILED) {\n                                              s18 = peg$parse__();\n                                              if (s18 !== peg$FAILED) {\n                                                s19 = peg$parseRPAREN();\n                                                if (s19 !== peg$FAILED) {\n                                                  s20 = peg$parse__();\n                                                  if (s20 !== peg$FAILED) {\n                                                    s21 = peg$parseRPAREN();\n                                                    if (s21 !== peg$FAILED) {\n                                                      peg$savedPos = s0;\n                                                      s1 = peg$c634(s5, s13, s17);\n                                                      s0 = s1;\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseKW_CAST();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseLPAREN();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse__();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parseexpr();\n                      if (s5 !== peg$FAILED) {\n                        s6 = peg$parse__();\n                        if (s6 !== peg$FAILED) {\n                          s7 = peg$parseKW_AS();\n                          if (s7 !== peg$FAILED) {\n                            s8 = peg$parse__();\n                            if (s8 !== peg$FAILED) {\n                              s9 = peg$parsesignedness();\n                              if (s9 !== peg$FAILED) {\n                                s10 = peg$parse__();\n                                if (s10 !== peg$FAILED) {\n                                  s11 = peg$parseKW_INTEGER();\n                                  if (s11 === peg$FAILED) {\n                                    s11 = null;\n                                  }\n                                  if (s11 !== peg$FAILED) {\n                                    s12 = peg$parse__();\n                                    if (s12 !== peg$FAILED) {\n                                      s13 = peg$parseRPAREN();\n                                      if (s13 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c635(s5, s9, s11);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseliteral_array();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_array() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRBRAKE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c636(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c637(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c638();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c639();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c641();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c221;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsesingle_char();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsesingle_char();\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c221;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c222); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c642.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c643); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c642.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c643); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s5 = peg$c221;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c222); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n            s7 = peg$parsesingle_char();\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n              s7 = peg$parsesingle_char();\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s7 = peg$c221;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c222); }\n              }\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c644(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s2 = peg$c221;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s4 = peg$c221;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c222); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c645(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s2 = peg$c495;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c496); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsesingle_quote_char();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsesingle_quote_char();\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s4 = peg$c495;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c496); }\n            }\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          peg$silentFails++;\n          s3 = peg$parseDOT();\n          peg$silentFails--;\n          if (s3 === peg$FAILED) {\n            s2 = void 0;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c646(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c221;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c222); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c221;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c222); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c647(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c495;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c496); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c495;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c496); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c648(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c649.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c650); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c651.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c652); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c653) {\n      s1 = peg$c653;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c654); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c655();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c656) {\n        s1 = peg$c656;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c657); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c658();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c659) {\n          s1 = peg$c659;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c660); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c661();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c662) {\n            s1 = peg$c662;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c663); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c664();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c665) {\n              s1 = peg$c665;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c666); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c667();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c668) {\n                s1 = peg$c668;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c669); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c670();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c671) {\n                  s1 = peg$c671;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c672); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c673();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c674) {\n                    s1 = peg$c674;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c675); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c676();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c677) {\n                      s1 = peg$c677;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c678); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c679();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c680) {\n                        s1 = peg$c680;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c681); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c682(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c683;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c684); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c685();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c686) {\n                            s1 = peg$c686;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c687); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c688();\n                          }\n                          s0 = s1;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c689.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c690); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c691(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c692(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c693(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c694(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c695(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c463;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c464); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c461;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c462); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c696(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c463;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c464); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c461;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c462); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c697(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c698;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c700(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c701(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c702(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c703.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c704); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c705.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c706); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c707.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c708); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c709.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c710); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c711(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c712) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c713); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c84) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c85); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c714) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c715); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c716) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c717); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c718) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c719); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c720) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c721); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c722) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c723); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c724) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c725); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c726();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c727) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c728); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c729) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c730); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c733) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c734); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c735) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c736); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c743) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c744); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c745) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c746); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c747) {\n      s1 = peg$c747;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c748); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c749) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c750); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURNING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c751) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c752); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c753();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c754) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c755); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c547) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c548); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c756) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c757); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c758) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c759); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c760();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c761) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c762); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c763) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c764); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c198); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c115) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c116); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c765) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c766); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c767) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c768); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c769();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c770) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c771); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c772();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c775();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SEQUENCE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c776) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c777); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c778();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLESPACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c781();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c202) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c203); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c782();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEALLOCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c783) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c784); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c785();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c163) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c786) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c787); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c788) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c789); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c790) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c791); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c792) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c793); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c794) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c795); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c796) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c797); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c798) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c799); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c800) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c801); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c802) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c803); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c804) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c805); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c312) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c313); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c806) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c807); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c808) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c809); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c810) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c811); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c812) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c813); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c814) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c815); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c816) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c817); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c818) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c819); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c820();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c821) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c822); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c823();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c824) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c825); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c826();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c827) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c828); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c829();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c830) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c831); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c832();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c833) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c834); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c835();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c234) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c836();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c837) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c838); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c839();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c840) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c841); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c842();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ILIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c843) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c844); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c845();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c846) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c847); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c848();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c175) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c176); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c849();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c850) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c851); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c852();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c853) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c854); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c855();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c856) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c857); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c858();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY_AGG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c859) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c860); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c861();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c862) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c863); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c864();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP_CONCAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c865) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c866); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c867();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c868) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c869); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c870();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c871) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c872); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c873();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c874) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c875); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c876();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c877) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c878); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c879();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c880) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c881); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c882();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c883) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c884); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c885();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c886) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c887); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c888) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c889); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c890) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c891); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c892) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c893); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c894) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c895); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c896) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c897); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c898) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c899); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c900();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOLEAN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c901) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c902); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c903();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c904) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c906();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c907) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c908); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c909();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c910) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c911); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c912();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c913) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c914); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c915();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c916) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c917); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c918();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c919) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c920); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c921();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c922) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c923); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c924();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c925) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c926); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c927();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c928) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c929); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c930();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c931) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c932); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c933();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSONB() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c934) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c935); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c936();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOMETRY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c937) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c938); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c939();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c940) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c941); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c942();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SERIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c943) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c944); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c945();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c946) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c947); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c948();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c949) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c951();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c952) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c953); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c954();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c955) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c956); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c957();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c958) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c959); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c960();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c961) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c962); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c963();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ENUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c964) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c965); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c966();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c967) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c968); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c969();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c970) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c971); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c972();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c973();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c974) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c975); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c976();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c977) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c978); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c979();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c980) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c981); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c982();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c983) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c984); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c985();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c986) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c987); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c988();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c989) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c990); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c991();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UUID() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c992) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c993); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c994();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c995) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c996); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c997();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c998) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c999); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1000();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c1001) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1002); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1003();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c626) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1004();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1005();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c586) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c587); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1006();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c598) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c599); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1007();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c610) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c611); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1008();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c616) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c617); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1009();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1010) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1011); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1012();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c1013) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1014); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1015();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1016) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1017); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1018();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1019) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1020); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1021();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SYSTEM_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c1022) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1023); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1024();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1025) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1026); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1027();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1028) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1029); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1030();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c1031) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1032); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1033();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1034) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1035); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1036();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1037) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1038); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1039();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c1040;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1041); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1042) {\n      s0 = peg$c1042;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1043); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c474;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR_DOUBLE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1044) {\n      s0 = peg$c1044;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1045); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1046) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1047); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1048) {\n      s0 = peg$c1048;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1049); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE_COLON() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1050) {\n      s0 = peg$c1050;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1051); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c384;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DUAL() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c1052) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1053); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c1054) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1055); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1056();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1057) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1058); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1059();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c1060) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1061); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1062();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c63); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1063();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c1064) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1065); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1066();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1067) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1068); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1069();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c60) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c61); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1070();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c207) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c208); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1071();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1072) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1073); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1074();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c1075) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1076); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1077();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONCURRENTLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1078) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1079); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1080();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c1081) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1082); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1083();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CALC_FOUND_ROWS() {\n    var s0;\n\n    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c1084) {\n      s0 = input.substr(peg$currPos, 19);\n      peg$currPos += 19;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1085); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c1086) {\n      s0 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1087); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_NO_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1088) {\n      s0 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1089); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_SMALL_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c1090) {\n      s0 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1091); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BIG_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c1092) {\n      s0 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1093); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BUFFER_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c1094) {\n      s0 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1095); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c698;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c1096;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1097); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c466;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c266;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c267); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c268;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c269); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c1098;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1099); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c1100;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1101); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c263;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c264); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSINGLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1102) {\n      s0 = peg$c1102;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1103); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c1104) {\n      s0 = peg$c1104;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1105); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1106) {\n      s0 = peg$c1106;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1107); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_WELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c1108) {\n      s0 = peg$c1108;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1109); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1110) {\n      s0 = peg$c1110;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1111); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1112) {\n      s0 = peg$c1112;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1113); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1114) {\n      s1 = peg$c1114;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1115); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c1116) {\n        s5 = peg$c1116;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1117); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1114) {\n          s6 = peg$c1114;\n          peg$currPos += 2;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1115); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsechar();\n          if (s6 !== peg$FAILED) {\n            s4 = [s4, s5, s6];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 === peg$FAILED) {\n        s3 = peg$parseblock_comment();\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1116) {\n          s5 = peg$c1116;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1117); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c1114) {\n            s6 = peg$c1114;\n            peg$currPos += 2;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c1115); }\n          }\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsechar();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseblock_comment();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c1116) {\n          s3 = peg$c1116;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1117); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1118) {\n      s1 = peg$c1118;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1119); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1120;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1121); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1122(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1123); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c1124.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1125); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c689.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c690); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c689.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c690); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1123); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c1126();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1127(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1128(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1129(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c411(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c411(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1130(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1131(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_name();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1132(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1133(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1134(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1135(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1136(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevar_decl();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevar_decl();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1137(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE_DOLLAR_DOUBLE();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c1138.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1139); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c1138.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1139); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_VAR_PRE_DOLLAR_DOUBLE();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1140(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_VAR_PRE_DOLLAR();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseident();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_VAR_PRE_DOLLAR();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            if (peg$c1138.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c1139); }\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              if (peg$c1138.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c1139); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_VAR_PRE_DOLLAR();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s7 = peg$c1141(s2, s4, s6);\n                  if (s7) {\n                    s7 = peg$FAILED;\n                  } else {\n                    s7 = void 0;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseKW_VAR_PRE_DOLLAR();\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1142(s2, s4, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_VAR_PRE();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsewithout_prefix_var_decl();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1143(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1144(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c698;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c698;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c699); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1145(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsearray_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecharacter_string_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenumeric_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedatetime_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsejson_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsegeometry_type();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsetext_type();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseuuid_type();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseboolean_type();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseenum_type();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseserial_interval_type();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsebinary_type();\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumeric_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecharacter_string_type();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLBRAKE();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRBRAKE();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1146(s1);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsenumeric_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecharacter_string_type();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLBRAKE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1147(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseboolean_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BOOL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOLEAN();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1148(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsebinary_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c1149) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1150); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1151();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CHAR();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_VARCHAR();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c703.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c704); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c703.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c704); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1152(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CHAR();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1153(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_VARCHAR();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1154(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type_suffix() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNSIGNED();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ZEROFILL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1155(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DECIMAL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_INT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INTEGER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_SMALLINT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_TINYINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_BIGINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_FLOAT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_DOUBLE();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c703.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c704); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c703.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c704); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseCOMMA();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = [];\n                    if (peg$c703.test(input.charAt(peg$currPos))) {\n                      s11 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s11 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c704); }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        if (peg$c703.test(input.charAt(peg$currPos))) {\n                          s11 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c704); }\n                        }\n                      }\n                    } else {\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s8 = [s8, s9, s10];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumeric_type_suffix();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c1156(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_NUMERIC();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DECIMAL();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INTEGER();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_SMALLINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_TINYINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_BIGINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_FLOAT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_DOUBLE();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c703.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c704); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c703.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c704); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsenumeric_type_suffix();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1157(s1, s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NUMERIC();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DECIMAL();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_INTEGER();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_SMALLINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_TINYINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_BIGINT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_FLOAT();\n                      if (s1 === peg$FAILED) {\n                        s1 = peg$parseKW_DOUBLE();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumeric_type_suffix();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1158(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetimezone() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1159) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1160); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c312) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c313); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TIME();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c1161) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c1162); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1163(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TIMESTAMP();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c703.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c704); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c703.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c704); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetimezone();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1164(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetimezone();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1165(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c703.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c704); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c703.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c704); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1166(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1154(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetime_type();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseenum_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ENUM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_item();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1167(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejson_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_JSON();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_JSONB();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1154(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsegeometry_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GEOMETRY();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1168(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseserial_interval_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SERIAL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INTERVAL();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1154(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetext_type() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TINYTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_MEDIUMTEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_LONGTEXT();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseLBRAKE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseRBRAKE();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1169(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TINYTEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_MEDIUMTEXT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_LONGTEXT();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1170(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuuid_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UUID();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1171(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      // 'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n\n      'NOT': true,\n      'NULL': true,\n      'NULLS': true,\n\n      'OFFSET': true,\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      // 'REPLACE': true,\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WINDOW': true,\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    function commonStrToLiteral(strOrLiteral) {\n      return typeof strOrLiteral === 'string' ? { type: 'same', value: strOrLiteral } : strOrLiteral\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, prefix, suffix, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, tablesample, table_hint } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values, prefix } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    let valuesExpr = valuesToSQL(values)\n    if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n    valueSQL[1] = `VALUES ${valuesExpr}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str, operatorToSQL(operator)]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  if (table_hint) result.push(`${toUpper(table_hint.keyword)}`, `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    qualify,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('QUALIFY', exprToSQL, qualify))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr.view)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL, fulltextSearchToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter           : alterExprToSQL,\n  aggr_func       : aggrToSQL,\n  window_func     : windowFuncToSQL,\n  'array'         : arrayStructExprToSQL,\n  assign          : assignToSQL,\n  binary_expr     : binaryToSQL,\n  case            : caseToSQL,\n  cast            : castToSQL,\n  column_ref      : columnRefToSQL,\n  datatype        : dataTypeToSQL,\n  extract         : extractFunToSQL,\n  fulltext_search : fulltextSearchToSQL,\n  function        : funcToSQL,\n  insert          : unionToSQL,\n  interval        : intervalToSQL,\n  show            : showToSQL,\n  struct          : arrayStructExprToSQL,\n  'window'        : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type, toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal, literalToSQL } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, filter, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    let separator = ' '\n    const distinctSQL = ['DISTINCT', '', str]\n    if (args.parentheses) {\n      separator = ''\n      distinctSQL[1] = '('\n      distinctSQL.push(')')\n    }\n    str = distinctSQL.filter(hasVal).join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  if (args.separator) str = [str, args.separator.keyword, literalToSQL(args.separator.value)].filter(hasVal).join(' ')\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  const filterStr = filter ? `FILTER (WHERE ${exprToSQL(filter.where)})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr, filterStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, isDual, schema, table, parentheses, properties,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction generatedExpressionToSQL(generated) {\n  if (!generated) return\n  const result = [toUpper(generated.value), `(${exprToSQL(generated.expr)})`, toUpper(generated.storage_type)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  const generated = generatedExpressionToSQL(columnDefinition.generated)\n  column.push(generated)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fulltextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fulltextSearchToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    replace, select, sql_security: sqlSecurity,\n    type, view, with: withClause,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer && `DEFINER = ${definer}`,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction deallocateToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  return [toUpper(type), toUpper(keyword), exprToSQL(expr)].filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './analyze'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter      : alterToSQL,\n  analyze    : analyzeToSQL,\n  attach     : attachToSQL,\n  create     : createToSQL,\n  select     : selectToSQL,\n  deallocate : deallocateToSQL,\n  delete     : deleteToSQL,\n  exec       : execToSQL,\n  update     : updateToSQL,\n  insert     : insertToSQL,\n  drop       : commonCmdToSQL,\n  truncate   : commonCmdToSQL,\n  replace    : insertToSQL,\n  declare    : declareToSQL,\n  use        : useToSQL,\n  rename     : renameToSQL,\n  call       : callToSQL,\n  desc       : descToSQL,\n  set        : setVarToSQL,\n  lock       : lockUnlockToSQL,\n  unlock     : lockUnlockToSQL,\n  show       : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\ntypeToSQLFn.bigquery = bigQueryToSQL\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    const astInfo = stmt[i] && stmt[i].ast ? stmt[i].ast : stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'deallocate', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (!global && window) window.global = window\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}